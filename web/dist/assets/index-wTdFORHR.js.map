{"version":3,"file":"index-wTdFORHR.js","sources":["../../js/ui/panels/index.js","../../js/ui/drawer.js","../../js/services/api.js","../../js/services/jmri.js","../../js/services/cachedValues.js","../../js/ui/busy.js","../../js/ui/toast.js","../../js/validation/dcc.js","../../js/validation/form.js","../../js/ui/header.js","../../js/ui/dom.js","../../js/ui/tabs.js","../../js/controllers/roster/dialog/decoderSelect.js","../../js/controllers/roster/dialog/infoTab.js","../../js/controllers/roster/dialog/functionsTab.js","../../js/controllers/roster/dialog.js","../../js/controllers/roster/data.js","../../js/controllers/roster/view.js","../../js/controllers/roster/selectors.js","../../js/controllers/roster/dialog/copySelector.js","../../js/controllers/roster/index.js","../../js/controllers/settings/selectors.js","../../js/controllers/settings/index.js","../../js/controllers/turnouts/data.js","../../js/controllers/turnouts/selectors.js","../../js/controllers/turnouts/view.js","../../js/services/prefixes.js","../../js/controllers/turnouts/dialog.js","../../js/controllers/turnouts/index.js","../../js/main.js"],"sourcesContent":["// js/ui/panels/index.js\n\n/** @typedef {\"roster\"|\"turnouts\"|\"settings\"} PanelName */\n\n/** Map of logical panel names to their element IDs. */\nconst PANEL_IDS = {\n  roster: \"panelRoster\",\n  turnouts: \"panelTurnouts\",\n  settings: \"panelSettings\",\n};\n\n/** Map of logical panel names to their corresponding nav button IDs. */\nconst NAV_IDS = {\n  roster: \"navRoster\",\n  turnouts: \"navTurnouts\",\n  settings: \"navSettings\",\n};\n\n/**\n * Shorthand for document.getElementById.\n *\n * @param {string} id\n * @returns {HTMLElement|null}\n */\nfunction byId(id) {\n  return document.getElementById(id);\n}\n\n/**\n * Show the requested panel, update nav state, and broadcast a \"panel:changed\" event.\n *\n * @param {PanelName} name - The logical panel name to display.\n * @returns {void}\n */\nexport function showPanel(name) {\n  const wantedPanel = String(name || \"roster\");\n\n  // Toggle panels\n  for (const key of Object.keys(PANEL_IDS)) {\n    const panelElement = byId(PANEL_IDS[key]);\n    if (!panelElement) continue;\n    if (key === wantedPanel) {\n      panelElement.removeAttribute(\"hidden\");\n    } else {\n      panelElement.setAttribute(\"hidden\", \"\");\n    }\n  }\n\n  // Toggle nav state\n  for (const key of Object.keys(NAV_IDS)) {\n    const navButton = byId(NAV_IDS[key]);\n    if (!navButton) continue;\n    navButton.classList.toggle(\"active\", key === wantedPanel);\n    navButton.setAttribute(\"aria-current\", key === wantedPanel ? \"page\" : \"false\");\n  }\n\n  // Broadcast\n  document.dispatchEvent(new CustomEvent(\"panel:changed\", { detail: { name: wantedPanel } }));\n}\n\n/**\n * One-time wiring for panel navigation + initial panel.\n *\n * - Click on a .nav-btn[data-view] switches panels\n * - URL hash (#roster / #turnouts / #settings) switches panels\n * - On load, selects the panel from hash or defaults to \"roster\"\n *\n * @returns {void}\n */\nexport function initPanels() {\n  // Click nav → show panel\n  document.addEventListener(\"click\", (event) => {\n    const navButton = event.target.closest(\".nav-btn[data-view]\");\n    if (!navButton) return;\n    const viewName = navButton.getAttribute(\"data-view\");\n    if (!viewName) return;\n    showPanel(/** @type {PanelName} */ (viewName));\n  });\n\n  // Hash routing (#roster / #turnouts / #settings)\n  window.addEventListener(\"hashchange\", () => {\n    const viewName = window.location.hash.replace(/^#/, \"\");\n    if (Object.prototype.hasOwnProperty.call(PANEL_IDS, viewName)) {\n      showPanel(/** @type {PanelName} */ (viewName));\n    }\n  });\n\n  // Initial panel\n  const initialPanelName = window.location.hash.replace(/^#/, \"\") || \"roster\";\n  showPanel(Object.prototype.hasOwnProperty.call(PANEL_IDS, initialPanelName) ? initialPanelName : \"roster\");\n}\n","/**\n * Initialize the slide-out drawer UI:\n * - Toggles open/close from any element matching \"#menuBtn\" or \".menu-btn\"\n * - Closes on ESC, outside click, or when a nav item inside the drawer is clicked\n *\n * @returns {void}\n */\nexport function initDrawer() {\n  const drawer = document.getElementById(\"drawer\");\n  if (!drawer) return;\n\n  // Toggle from any button (support id OR class so you don’t rely on duplicate IDs)\n  const toggles = Array.from(document.querySelectorAll(\"#menuBtn, .menu-btn\"));\n  const handleToggleClick = (event) => {\n    event.stopPropagation(); // avoid bubbling to outside-click handler\n    drawer.classList.toggle(\"open\");\n  };\n  toggles.forEach((btn) => btn.addEventListener(\"click\", handleToggleClick));\n\n  // Close when clicking a nav item inside the drawer\n  drawer.addEventListener(\"click\", (event) => {\n    if (event.target.closest(\".drawer .nav-btn\")) {\n      drawer.classList.remove(\"open\");\n    }\n  });\n\n  // Close on ESC\n  document.addEventListener(\"keydown\", (event) => {\n    if (event.key === \"Escape\") drawer.classList.remove(\"open\");\n  });\n\n  // Close when clicking anywhere outside the drawer or toggle buttons\n  document.addEventListener(\"click\", (event) => {\n    if (!drawer.classList.contains(\"open\")) return;\n    if (event.target.closest(\".drawer, #menuBtn, .menu-btn\")) return;\n    drawer.classList.remove(\"open\");\n  });\n}\n","// js/services/api.js\n\n/** Base origin for same-origin requests (JMRI web server). */\nconst baseOrigin = window.location.origin;\n\n/**\n * Resolve a path (\"/api/...\") or relative URL against the current origin.\n *\n * @param {string} pathOrUrl - E.g. \"/api/roster\" or \"json/railroad\".\n * @returns {string} Absolute URL string.\n */\nfunction resolveUrl(pathOrUrl) {\n  return new URL(pathOrUrl, baseOrigin).toString();\n}\n\n/**\n * Parse a fetch Response as JSON if available, otherwise as text.\n *\n * - If the server returns `Content-Type: application/json` and an empty body,\n *   we treat it as a successful boolean `true` (useful for DELETEs).\n *\n * @param {Response} response\n * @returns {Promise<any|string>} Parsed payload.\n */\nasync function parseResponse(response) {\n  const contentType = response.headers.get(\"content-type\") || \"\";\n  const isJson = /application\\/json/i.test(contentType);\n\n  // Read the body once to avoid double-consumption\n  const text = await response.text();\n\n  // Treat empty JSON body as success - useful for delete responses\n  if (isJson && (text.length === 0 || text === null)) return true;\n\n  // Original behavior\n  return isJson ? JSON.parse(text) : text;\n}\n\n/**\n * Throw a useful error if the response is not OK.\n *\n * @param {Response} response\n * @throws {Error} If response.ok is false.\n * @returns {void}\n */\nfunction assertResponseOk(response) {\n  if (!response.ok) {\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n}\n\n/**\n * GET JSON (or text) from the server using same-origin credentials.\n *\n * @param {string} path - Request path, e.g. \"/json/railroad\".\n * @returns {Promise<any|string>} Parsed JSON or text.\n */\nexport async function getJSON(path) {\n  const response = await fetch(resolveUrl(path), {\n    credentials: \"same-origin\",\n    headers: { Accept: \"application/json\" },\n  });\n  assertResponseOk(response);\n  return parseResponse(response);\n}\n\n/**\n * POST JSON (or text) to the server using same-origin credentials.\n *\n * @param {string} path - Request path, e.g. \"/json/railroad\".\n * @returns {Promise<any|string>} Parsed JSON or text.\n */\nexport async function postJSON(path) {\n  const response = await fetch(resolveUrl(path), {\n    credentials: \"same-origin\",\n    method: \"POST\",\n    headers: { Accept: \"application/json\" },\n  });\n  assertResponseOk(response);\n  return parseResponse(response);\n}\n\n/**\n * POST an x-www-form-urlencoded body and parse JSON or text response.\n *\n * @param {string} path - Request path, e.g. \"/api/roster/add\".\n * @param {URLSearchParams|string} body - Form body.\n * @param {\"POST\"|\"PUT\"|\"PATCH\"} [method=\"POST\"] - HTTP method to use.\n * @returns {Promise<any|string>} Parsed JSON or text.\n */\nexport async function postForm(path, body, method = \"POST\") {\n  const response = await fetch(resolveUrl(path), {\n    method,\n    credentials: \"same-origin\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n    },\n    body,\n  });\n  assertResponseOk(response);\n  return parseResponse(response);\n}\n\n/**\n * POST multipart/form-data (for file uploads) and parse JSON or text response.\n *\n * @param {string} path - Request path, e.g. \"/api/roster/image?id=...\".\n * @param {FormData} formData - Multipart body.\n * @returns {Promise<any|string>} Parsed JSON or text.\n */\nexport async function postMultipart(path, formData) {\n  const response = await fetch(resolveUrl(path), {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    body: formData,\n  });\n  assertResponseOk(response);\n  return parseResponse(response);\n}\n\n/**\n * Low-level JSON fetch helper for the JMRI JSON servlet.\n *\n * Sends a body under `{ data: ... }` per the JMRI JSON protocol.\n *\n * @param {\"GET\"|\"PUT\"|\"POST\"|\"DELETE\"} method - HTTP method.\n * @param {string} path - Absolute path (e.g., \"/json/turnout/IT123\").\n * @param {object} [data] - Payload to send under the `data` key.\n * @returns {Promise<any|string>} Parsed JSON or text.\n */\nexport async function jmriJsonCalls(method, path, data) {\n  const response = await fetch(path, {\n    method,\n    headers: { \"Content-Type\": \"application/json\" },\n    body: data ? JSON.stringify({ data }) : undefined,\n  });\n  assertResponseOk(response);\n  return parseResponse(response);\n}\n","// js/services/jmri.js\nimport { getJSON, postJSON, postForm, postMultipart } from \"./api.js\";\n\n/* =====================================================================================\n * Constants (JMRI / DCC specifics)\n * ===================================================================================== */\n\n/** CV register numbers used for address reads/writes. */\nconst cvRegister = {\n  shortAddress: 1,\n  longAddrMsb: 17,\n  longAddrLsb: 18,\n  config: 29, // CV29\n};\n\n/** Bit flags within CV29. */\nconst cv29Flags = {\n  longAddressMode: 0x20, // bit 5\n};\n\n/** NMRA long address base for CV17. */\nconst cv17Base = 192;\n\n/**\n * Resolve the roster file name for a given logical roster ID.\n *\n * @param {string} locoId\n * @returns {Promise<string|null>} Resolved file name (e.g., \"ABC123.xml\") or null.\n */\nexport async function resolveFileNameById(locoId) {\n  const roster = await getRoster();\n  const match = (roster || []).find((rosterEntry) => (rosterEntry?.id || \"\") === locoId);\n  return match?.fileName || null;\n}\n\n/* =====================================================================================\n * Railroad / Roster\n * ===================================================================================== */\n\n/**\n * Get the friendly name of the currently loaded JMRI railroad.\n * Falls back to \"My Railroad\" if unavailable.\n *\n * Endpoint: /json/railroad → usually: [{ type:'railroad', data:{ name:'...' } }]\n *\n * @returns {Promise<string>}\n */\nexport async function getRailroadName() {\n  try {\n    const payload = await getJSON(\"/json/railroad\");\n    const item = Array.isArray(payload) ? payload.find((x) => x && x.type === \"railroad\") : null;\n    return item?.data?.name || \"My Railroad\";\n  } catch {\n    return \"My Railroad\";\n  }\n}\n\n/**\n * Fetch the full roster list.\n *\n * Endpoint: /api/roster\n *\n * @param {{ fresh?: boolean }} [opts]\n * @returns {Promise<any>}\n */\nexport async function getRoster(opts = {}) {\n  const fresh = !!opts.fresh;\n  const url = fresh ? `/api/roster?t=${Date.now()}` : \"/api/roster\";\n  return getJSON(url);\n}\n\n/**\n * Fetch saved decoder information for a roster ID.\n *\n * @param {string} rosterId\n * @returns {Promise<any>}\n */\nexport async function getDecoder(rosterId) {\n  const url = `/api/roster/decoder?id=${encodeURIComponent(rosterId)}`;\n  return getJSON(url);\n}\n\n/**\n * Delete a roster entry by file name (e.g., \"ABC123.xml\").\n *\n * Endpoint: POST /api/roster/delete (form: file=<fileName>)\n *\n * @param {string} fileName\n * @returns {Promise<any|string>}\n */\nexport async function deleteRoster(fileName) {\n  const form = new URLSearchParams();\n  form.set(\"file\", fileName);\n  return postForm(\"/api/roster/delete\", form);\n}\n\n/**\n * Create or update a roster entry. The server decides add/update based on `file`.\n *\n * Endpoint: POST /api/roster/add\n *\n * @param {string} fileName\n * @param {{ id:string, address:string, road:string, number:string, owner:string, model:string, image?:string }} record\n * @returns {Promise<any|string>}\n */\nexport async function saveRosterEntry(fileName, record) {\n  const form = new URLSearchParams();\n  form.set(\"file\", fileName);\n  form.set(\"id\", record.id || \"\");\n  form.set(\"address\", record.address || \"\");\n  form.set(\"road\", record.road || \"\");\n  form.set(\"number\", record.number || \"\");\n  form.set(\"owner\", record.owner || \"\");\n  form.set(\"model\", record.model || \"\");\n\n  // Include only if caller decided an image string should be sent\n  if (Object.prototype.hasOwnProperty.call(record, \"image\")) {\n    form.set(\"image\", record.image || \"\");\n  }\n\n  return postForm(\"/api/roster/add\", form);\n}\n\n/**\n * Create or update the loco decoder values.\n *\n * @param {string} rosterId\n * @param {{ family:string, model:string, manufacturer?:string, mfgId?:number, mfgName?:string, productId?:number, modelId?:string }} decoder\n * @returns {Promise<any|string>}\n */\nexport async function saveRosterDecoder(\n  rosterId,\n  { family, model, manufacturer, mfgId, mfgName, productId, modelId }\n) {\n  if (!rosterId) throw new Error(\"Missing rosterId\");\n  if (!family || !model) throw new Error(\"Missing family/model\");\n\n  const form = new URLSearchParams({\n    id: rosterId,\n    family,\n    model,\n  });\n\n  if (manufacturer) form.append(\"manufacturer\", manufacturer);\n  if (mfgId !== null && typeof mfgId !== \"undefined\") form.append(\"mfgId\", String(mfgId));\n  if (productId !== null && typeof productId !== \"undefined\") form.append(\"productId\", String(productId));\n  if (mfgName !== null && typeof mfgName !== \"undefined\") form.append(\"mfgName\", String(mfgName));\n  if (modelId !== null && typeof modelId !== \"undefined\") form.append(\"modelId\", String(modelId));\n\n  return postForm(\"/api/roster/decoder/save\", form);\n}\n\n/**\n * Upload/replace a roster image by logical ID (JMRI roster id, not file name).\n *\n * Endpoint: POST /api/roster/image?id=<id> (multipart: field \"image\")\n *\n * @param {string} id\n * @param {File} file\n * @returns {Promise<any|string>}\n */\nexport async function uploadRosterImage(id, file) {\n  const formData = new FormData();\n  formData.append(\"image\", file, file.name);\n  return postMultipart(`/api/roster/image?id=${encodeURIComponent(id)}`, formData);\n}\n\n/**\n * Upload a roster XML file (with optional safe filename override).\n *\n * @param {File} file\n * @param {string} filenameOverride\n * @returns {Promise<any|string>}\n */\nexport async function uploadRosterXml(file, filenameOverride) {\n  const formData = new FormData();\n  formData.append(\"file\", file, filenameOverride);\n  return postMultipart(\"/api/roster/add\", formData);\n}\n\n/* =====================================================================================\n * Functions (F0–F28)\n * ===================================================================================== */\n\n/**\n * Get functions for a given roster file (e.g., \"ABC123.xml\").\n *\n * Endpoint: /api/roster/fn/list?file=<file>\n *\n * @param {string} fileName\n * @returns {Promise<any>}\n */\nexport async function getFunctions(fileName) {\n  return getJSON(`/api/roster/fn/list?file=${encodeURIComponent(fileName)}`);\n}\n\n/**\n * Save functions for a given roster file.\n *\n * Endpoint: POST /api/roster/fn/save\n * Form arrays: num[], label[], lockable[], img[], imgSel[]\n *\n * @param {string} fileName\n * @param {Array<{num:number, label:string, lockable:boolean, img?:string, imgSel?:string}>} items\n * @returns {Promise<any|string>}\n */\nexport async function saveFunctions(fileName, items) {\n  const form = new URLSearchParams();\n  form.set(\"file\", fileName);\n\n  for (const item of items) {\n    form.append(\"num[]\", String(item.num ?? \"\"));\n    form.append(\"label[]\", String(item.label ?? \"\"));\n    form.append(\"lockable[]\", item.lockable ? \"true\" : \"false\");\n    form.append(\"img[]\", String(item.img ?? \"\"));\n    form.append(\"imgSel[]\", String(item.imgSel ?? \"\"));\n  }\n\n  return postForm(\"/api/roster/fn/save\", form);\n}\n\n/* =====================================================================================\n * CV Read Helpers (address detection)\n * ===================================================================================== */\n\n/**\n * Read CVs required to derive the decoder address and return the address as a string.\n * Returns \"\" if the address cannot be determined.\n *\n * Reads: CV1 (short), CV17/18 (long components), CV29 (mode flag)\n *\n * Endpoint: /api/jmri/read?list=1,17,18,29\n *\n * @returns {Promise<string>}\n */\nexport async function readAddressFromTrack() {\n  const data = await getJSON(\"/api/jmri/read?list=1,17,18,29\");\n\n  // JMRI may return { ok, values:{...} } or just { ... } — normalise:\n  const values = data?.values ?? data ?? {};\n\n  const cv29 = Number(values[String(cvRegister.config)]);\n  if (!Number.isFinite(cv29)) return \"\";\n\n  const longMode = (cv29 & cv29Flags.longAddressMode) === cv29Flags.longAddressMode;\n\n  if (longMode) {\n    const msb17 = Number(values[String(cvRegister.longAddrMsb)]); // CV17\n    const lsb18 = Number(values[String(cvRegister.longAddrLsb)]); // CV18\n    if (!Number.isFinite(msb17) || !Number.isFinite(lsb18)) return \"\";\n    const longAddress = 256 * (msb17 - cv17Base) + lsb18;\n    return String(longAddress);\n  }\n\n  const cv1 = Number(values[String(cvRegister.shortAddress)]);\n  return Number.isFinite(cv1) ? String(cv1) : \"\";\n}\n\n/* =====================================================================================\n * Write CVs (address programming) to track\n * ===================================================================================== */\n\n/**\n * Ask the server to write the DCC address (server computes CV1/17/18/29).\n *\n * @param {number|string} newAddress  Desired DCC address (1..9999)\n * @param {{ mode?: \"ops\"|\"service\", currentAddress?: number, currentLong?: boolean }} [opts]\n * @returns {Promise<any>} Server response (expected shape: { ok:true, wrote:{...} }).\n */\nexport async function writeAddressToTrack(newAddress, opts = {}) {\n  const mode = opts.mode === \"ops\" ? \"ops\" : \"service\"; // default service\n  const addr = Number(newAddress);\n  if (!Number.isFinite(addr) || addr <= 0 || addr > 9999) {\n    throw new Error(\"Invalid DCC address\");\n  }\n\n  const body = new URLSearchParams();\n  body.set(\"mode\", mode);\n  body.set(\"newAddress\", String(addr));\n\n  // For ops mode, server needs the CURRENT address/long to reach the loco.\n  if (mode === \"ops\") {\n    const curr = Number(opts.currentAddress);\n    const isLong = typeof opts.currentLong === \"boolean\" ? opts.currentLong : curr >= 128;\n    if (!Number.isFinite(curr) || curr <= 0) {\n      throw new Error(\"Ops mode requires { currentAddress, currentLong } to reach the decoder\");\n    }\n    body.set(\"address\", String(curr));\n    body.set(\"long\", String(!!isLong));\n  }\n\n  const res = await postForm(\"/api/jmri/writeAddress\", body);\n  if (!res || res.ok !== true) {\n    throw new Error((res && res.message) || \"Address write failed\");\n  }\n  return res; // { ok:true, wrote:{ ... } }\n}\n\n/**\n * Low-level CV write helper.\n *\n * Backend contract (proposed):\n *   POST /api/jmri/write\n *   Form fields:\n *     mode = \"ops\" | \"service\"\n *     list = \"cv,cv,cv\"          (e.g., \"1,29\" or \"17,18,29\")\n *     v[cv] = value              (e.g., v[29]=38)\n *\n * Response: { ok: true } or throws on error.\n *\n * @param {Record<number, number>} valuesByCv\n * @param {{ mode?: \"ops\"|\"service\", address?: number, long?: boolean }} [opts]\n * @returns {Promise<void>}\n */\nexport async function writeCVs(valuesByCv, opts = {}) {\n  const mode = opts.mode === \"service\" ? \"service\" : \"ops\";\n  const cvNumbers = Object.keys(valuesByCv)\n    .map(Number)\n    .sort((left, right) => left - right);\n  if (!cvNumbers.length) return;\n\n  const form = new URLSearchParams();\n  form.set(\"mode\", mode);\n  if (mode === \"ops\") {\n    const addr = Number(opts.address);\n    const isLong = !!opts.long;\n    if (!Number.isFinite(addr) || addr <= 0) {\n      throw new Error(\"Ops-mode requires a valid 'address'\");\n    }\n    form.set(\"address\", String(addr));\n    form.set(\"long\", String(isLong));\n  }\n  form.set(\"list\", cvNumbers.join(\",\"));\n  for (const cvNumber of cvNumbers) {\n    form.set(`v[${cvNumber}]`, String(valuesByCv[cvNumber]));\n  }\n\n  const result = await postForm(\"/api/jmri/write\", form);\n  if (result && result.ok === false) {\n    throw new Error(result.message || \"Write failed\");\n  }\n}\n\n/* =====================================================================================\n * Read Decoder from Programming Track\n * ===================================================================================== */\n\n/**\n * Fetch the full decoder catalog known to the backend.\n *\n * @returns {Promise<any[]>}\n */\nexport async function getDecoderCatalog() {\n  const response = await fetch(\"/api/decoder/identify?all=1\"); // adjust if needed\n  if (!response.ok) throw new Error(\"Failed to load decoder catalog\");\n  return response.json();\n}\n\n/**\n * Identify decoder from loco (read from track/ops).\n * dccAddress is optional; backend may auto-detect via current programmer.\n *\n * @param {{ dccAddress?: number|string }} [params]\n * @returns {Promise<any>} Identification payload.\n */\nexport async function identifyDecoderFromLoco({ dccAddress } = {}) {\n  const response = await fetch(\"/api/decoder/identify\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ dccAddress }),\n  });\n  if (!response.ok) {\n    let details = \"\";\n    try {\n      details = await response.text();\n    } catch (error) {\n      console.warn(error);\n    }\n    throw new Error(details || \"Failed to read decoder\");\n  }\n  return response.json();\n}\n\n/* =====================================================================================\n * JMRI Turnout Servlet Helpers\n * ===================================================================================== */\n\n/**\n * Fetch the list of turnouts from JMRI.\n *\n * @returns {Promise<any[]>} Raw turnouts payload.\n * @throws {Error} If the endpoint cannot be loaded or returns no usable data.\n */\nexport async function getTurnouts() {\n  let payload = null;\n  let lastError = null;\n\n  try {\n    payload = await getJSON(\"/json/turnouts\");\n    if (payload) {\n      return payload;\n    }\n  } catch (error) {\n    lastError = error;\n  }\n\n  // If we reach here, we didn't get usable data.\n  throw lastError || new Error(\"No turnout data\");\n}\n\n/* =====================================================================================\n * JMRI Stores Helpers\n * ===================================================================================== */\n\nexport let _panelsFileCache = null;\n\n/**\n * Update the cached panels file name.\n *\n * @param {string} value\n * @returns {void}\n */\nexport function updatePanelsFileCache(value) {\n  _panelsFileCache = value;\n}\n\n/**\n * Get the currently configured panels file info.\n *\n * @returns {Promise<any>}\n */\nexport async function getCurrentPanelsFile() {\n  return getJSON(\"/api/store/user/file\");\n}\n\n/**\n * Ask the server to store the current user configuration.\n *\n * @param {string} [fileName]\n * @returns {Promise<any|string>}\n */\nexport async function storeUserConfig(fileName) {\n  const url = fileName ? `/api/store/user?file=${encodeURIComponent(fileName)}` : \"/api/store/user\";\n  return postJSON(url);\n}\n\n/* =====================================================================================\n * JMRI Active Connection Helpers\n * ===================================================================================== */\n\n/**\n * Get the list of available JMRI connections (with active flag).\n *\n * @returns {Promise<Array>} Connections payload.\n */\nexport async function getActiveConnection() {\n  return getJSON(\"/api/connections\");\n}\n\n/**\n * Select the active JMRI connection by system prefix.\n *\n * @param {string} connectionPrefix\n * @returns {Promise<any|string>}\n */\nexport async function setActiveConnection(connectionPrefix) {\n  return postJSON(`/api/connections/select?systemPrefix=${connectionPrefix}`);\n}\n","// js/services/cachedValues.js\n\nimport {\n  getCurrentPanelsFile,\n  _panelsFileCache as panelsFileCache,\n  updatePanelsFileCache,\n  storeUserConfig,\n  getActiveConnection,\n} from \"./jmri.js\";\n\n/** Default filename used when we cannot read the current panels file. */\nconst defaultPanelsFilename = \"AutoStorePanels.xml\";\n\n/** Timeout handle for deferred panel-store writes. */\nlet scheduledStoreTimeoutId = 0;\n\n/** The currently active JMRI connection (cached for consumers). */\nexport let activeConnection = null;\n\n/**\n * Populate commonly cached values used across the app.\n * - Schedules a deferred store of user config to the current panels file\n * - Retrieves and caches the active connection\n *\n * @returns {Promise<void>}\n */\nexport async function populateCachedValues() {\n  await schedulePanelsFileStore();\n  await fetchAndPopulateActiveConnection();\n}\n\n/**\n * Ensure the panels file cache is initialized, then schedule a deferred write\n * of user config to that file. Subsequent calls reset the timer.\n *\n * @param {number} [delay=800] - Delay in milliseconds before writing.\n * @returns {Promise<void>}\n */\nasync function schedulePanelsFileStore(delay = 800) {\n  if (!panelsFileCache) {\n    let panelsFileName = \"\";\n    try {\n      const info = await getCurrentPanelsFile();\n      panelsFileName = info?.fileName || defaultPanelsFilename;\n    } catch {\n      panelsFileName = defaultPanelsFilename;\n    }\n    updatePanelsFileCache(panelsFileName);\n  }\n\n  clearTimeout(scheduledStoreTimeoutId);\n  scheduledStoreTimeoutId = setTimeout(() => {\n    // Fire-and-forget; keep UI responsive even if this fails.\n    storeUserConfig(panelsFileCache).catch(() => {});\n  }, delay);\n}\n\n/**\n * Fetch active connections from JMRI and cache the single active one.\n *\n * @returns {Promise<void>}\n */\nasync function fetchAndPopulateActiveConnection() {\n  const activeConnectionList = await getActiveConnection();\n  populateActiveConnection(activeConnectionList);\n}\n\n/**\n * Derive and cache the active connection from a list of connections.\n *\n * @param {Array<{active?: boolean}>} activeConnectionList - Connections returned by JMRI.\n * @returns {void}\n */\nexport function populateActiveConnection(activeConnectionList) {\n  activeConnection = activeConnectionList.find((connection) => connection.active) ?? null;\n}\n","// js/ui/busy.js\n\n// Create a single global instance shared across all imports.\n(function initGlobalBusyOverlay() {\n  const busyKey = \"__APP_BUSY_OVERLAY__\";\n  if (window[busyKey]) return;\n\n  /** Internal singleton state + helpers */\n  const overlay = {\n    // State\n    count: 0,\n    dialogEl: null, // <dialog id=\"appBusy\"> (top-layer when supported)\n    fallbackEl: null, // <div id=\"appBusy\"> (fallback)\n    labelEl: null, // <div id=\"appBusyLabel\">\n    watchdogTimer: null,\n\n    /**\n     * Feature detection for the HTML <dialog> element.\n     * @returns {boolean}\n     */\n    supportsDialog() {\n      return typeof HTMLDialogElement !== \"undefined\";\n    },\n\n    /**\n     * Ensure overlay DOM exists (lazy-created on first use).\n     * Creates either a <dialog> (preferred) or a fallback <div>.\n     * @returns {void}\n     */\n    ensureOverlay() {\n      if (this.dialogEl || this.fallbackEl) return;\n\n      if (this.supportsDialog()) {\n        const dlg = document.createElement(\"dialog\");\n        dlg.id = \"appBusy\";\n        dlg.setAttribute(\"aria-live\", \"polite\");\n        dlg.setAttribute(\"aria-busy\", \"true\");\n        dlg.addEventListener(\"cancel\", (event) => event.preventDefault()); // prevent ESC close\n\n        const panel = document.createElement(\"div\");\n        panel.className = \"panel\";\n        panel.innerHTML = `\n          <div class=\"spinner\" aria-hidden=\"true\"></div>\n          <div class=\"label\" id=\"appBusyLabel\">Working…</div>\n        `;\n\n        dlg.appendChild(panel);\n        document.body.appendChild(dlg);\n\n        this.dialogEl = dlg;\n        this.labelEl = panel.querySelector(\"#appBusyLabel\");\n      } else {\n        const div = document.createElement(\"div\");\n        div.id = \"appBusy\";\n        div.innerHTML = `\n          <div class=\"panel\" role=\"alert\" aria-live=\"assertive\">\n            <div class=\"spinner\" aria-hidden=\"true\"></div>\n            <div class=\"label\" id=\"appBusyLabel\">Working…</div>\n          </div>\n        `;\n        document.body.appendChild(div);\n\n        this.fallbackEl = div;\n        this.labelEl = div.querySelector(\"#appBusyLabel\");\n      }\n    },\n\n    /**\n     * Open/Show the overlay (top-layer if <dialog> is supported).\n     * @param {string} [message] - Optional message to display.\n     * @returns {void}\n     */\n    openOverlay(message) {\n      this.ensureOverlay();\n\n      const root = document.getElementById(\"appBusy\");\n      if (root) root.style.display = \"grid\"; // ensures visibility even during reflow\n\n      if (this.labelEl) this.labelEl.textContent = message || \"Working…\";\n\n      if (this.dialogEl) {\n        if (!this.dialogEl.open) this.dialogEl.showModal(); // place on top layer\n        document.body.setAttribute(\"aria-busy\", \"true\");\n      } else if (this.fallbackEl) {\n        this.fallbackEl.classList.add(\"active\");\n        document.documentElement.style.pointerEvents = \"none\";\n        this.fallbackEl.style.pointerEvents = \"auto\";\n      }\n    },\n\n    /**\n     * Close/Hide the overlay (defensive across ticks).\n     * @returns {void}\n     */\n    closeOverlay() {\n      const root = document.getElementById(\"appBusy\");\n      if (root) root.style.display = \"none\";\n\n      if (this.dialogEl) {\n        try {\n          if (this.dialogEl.open) this.dialogEl.close();\n        } catch (error) {\n          console.warn(error);\n        }\n        document.body.removeAttribute(\"aria-busy\");\n      }\n      if (this.fallbackEl) {\n        this.fallbackEl.classList.remove(\"active\");\n        document.documentElement.style.pointerEvents = \"\";\n      }\n    },\n\n    /**\n     * Ensure close happens even if the frame is busy (microtask/RAF retries).\n     * @returns {void}\n     */\n    scheduleCloseWatchdog() {\n      if (this.watchdogTimer) return;\n      this.watchdogTimer = setTimeout(() => {\n        this.watchdogTimer = null;\n        if (this.count === 0) {\n          this.closeOverlay();\n          queueMicrotask(() => this.closeOverlay());\n          requestAnimationFrame(() => this.closeOverlay());\n        }\n      }, 0);\n    },\n  };\n\n  // Expose singleton on window for all modules to share.\n  window[busyKey] = overlay;\n})();\n\n/* ---------- Public API (shared singleton) ---------- */\n\nconst busyOverlay = window[\"__APP_BUSY_OVERLAY__\"];\n\n/**\n * Show the global busy overlay. Re-entrant and cross-module safe.\n *\n * @param {string} [message=\"Working…\"] - Message to display under the spinner.\n * @returns {void}\n */\nexport function showBusy(message = \"Working…\") {\n  busyOverlay.count += 1;\n  if (busyOverlay.count === 1) {\n    busyOverlay.openOverlay(message);\n  } else if (busyOverlay.labelEl) {\n    busyOverlay.labelEl.textContent = message;\n  }\n}\n\n/**\n * Hide the overlay when no more busy operations remain.\n *\n * @returns {void}\n */\nexport function hideBusy() {\n  if (busyOverlay.count > 0) busyOverlay.count -= 1;\n  if (busyOverlay.count < 0) busyOverlay.count = 0;\n\n  // Keep the spinner hidden immediately, regardless of dialog timing.\n  const root = document.getElementById(\"appBusy\");\n  if (root) root.style.display = \"none\";\n\n  if (busyOverlay.count === 0) {\n    busyOverlay.scheduleCloseWatchdog();\n  }\n}\n\n/**\n * Run an async task while the overlay is visible. Always hides afterwards.\n *\n * @template T\n * @param {() => Promise<T>} task - Async function to execute.\n * @param {string} [message=\"Working…\"] - Message to display while busy.\n * @returns {Promise<T>} The resolved value of the task.\n */\nexport async function busyWhile(task, message = \"Working…\") {\n  showBusy(message);\n  try {\n    return await task();\n  } finally {\n    hideBusy();\n  }\n}\n\n/**\n * Emergency helper: immediately clear any visible overlay.\n *\n * @returns {void}\n */\nexport function forceClearBusy() {\n  busyOverlay.count = 0;\n  busyOverlay.closeOverlay();\n}\n","// js/ui/toast.js\n\nconst TOAST_ID = \"toast\";\nconst TOAST_DIALOG_ID = \"toastLayer\";\n\nlet hideToastTimerId = 0;\n\n/**\n * Look up the toast dialog and content nodes from the DOM.\n *\n * @returns {{ toastDialog: HTMLDialogElement|null, toastElement: HTMLElement|null }}\n */\nfunction getToastNodes() {\n  const toastDialog = /** @type {HTMLDialogElement|null} */ (document.getElementById(TOAST_DIALOG_ID));\n  const toastElement = /** @type {HTMLElement|null} */ (document.getElementById(TOAST_ID));\n\n  if (!toastDialog || !toastElement) {\n    // Markup was not inserted in the page\n    return { toastDialog: null, toastElement: null };\n  }\n  return { toastDialog, toastElement };\n}\n\n/**\n * Show a brief toast message above everything (even modal <dialog>s).\n * Visuals are fully controlled by CSS; JS just toggles classes & opens/closes the dialog.\n *\n * @param {string} message - Text to display inside the toast.\n * @param {number} [durationMs=2000] - Time on screen before hiding (ms).\n * @returns {void}\n */\nexport function showToast(message, durationMs = 2000) {\n  const { toastDialog, toastElement } = getToastNodes();\n  if (!toastDialog || !toastElement) return;\n\n  toastElement.textContent = String(message ?? \"\");\n\n  // Put the toast in the browser's top layer\n  if (!toastDialog.open) toastDialog.show();\n\n  // Show via CSS class\n  toastElement.classList.add(\"show\");\n\n  clearTimeout(hideToastTimerId);\n  hideToastTimerId = setTimeout(() => {\n    toastElement.classList.remove(\"show\");\n\n    // Close the dialog after the CSS transition ends (keep in sync with your CSS)\n    const TRANSITION_MS = 200;\n    setTimeout(() => {\n      if (toastDialog.open) toastDialog.close();\n    }, TRANSITION_MS);\n  }, Number.isFinite(durationMs) ? durationMs : 2000);\n}\n","// js/validation/dcc.js\n// Reusable DCC address validation + UI helpers\n\n/* ===================== Public API ===================== */\n\n/** Shared, canonical DCC address rules. */\nexport const DCC_RULES_REQUIRED = Object.freeze({\n  required: true,\n  digitsOnly: true,\n  maxDigits: 4,\n  min: 1,\n  max: 9999,\n});\n\n/** Optional DCC address rules (empty allowed). */\nexport const DCC_RULES_OPTIONAL = Object.freeze({\n  required: false,\n  digitsOnly: true,\n  maxDigits: 4,\n  min: 1,\n  max: 9999,\n});\n\n/**\n * Validate a DCC address string against simple rules.\n *\n * @param {string} raw - User input (any string).\n * @param {object} rules\n * @param {boolean} [rules.required=true]   - Whether a value is mandatory.\n * @param {boolean} [rules.digitsOnly=true] - Restrict to 0–9.\n * @param {number}  [rules.maxDigits=4]     - Max number of digits.\n * @param {number}  [rules.min=1]           - Min numeric value (if present).\n * @param {number}  [rules.max=9999]        - Max numeric value (if present).\n * @returns {string|null} Error message, or null if valid.\n */\nexport function getDccAddressError(raw, rules = {}) {\n  const { required = true, digitsOnly = true, maxDigits = 4, min = 1, max = 9999 } = rules;\n\n  const value = String(raw ?? \"\").trim();\n\n  if (required && !value) return \"DCC Address is required\";\n  if (!required && !raw) return null;\n\n  if (digitsOnly && !/^\\d+$/.test(value)) return \"Use digits only (0-9)\";\n  if (maxDigits && value.length > maxDigits) return `Max ${maxDigits} digits`;\n\n  const num = Number(value);\n  if (Number.isNaN(num)) return \"DCC Address must be numeric\";\n  if (num < min || num > max) return `DCC Address must be between ${min} and ${max}`;\n\n  return null;\n}\n\n/**\n * Ensure an inline error element exists *after* the input (returns it).\n *\n * @param {HTMLInputElement} input\n * @param {string} errorId\n * @param {string} [className=\"fn-error\"]\n * @returns {HTMLElement}\n */\nexport function ensureInlineErrorAfter(input, errorId, className = \"fn-error\") {\n  let element = document.getElementById(errorId);\n  if (!element) {\n    element = document.createElement(\"div\");\n    element.id = errorId;\n    element.className = className;\n    element.setAttribute(\"role\", \"alert\");\n    element.setAttribute(\"aria-live\", \"polite\");\n    input.insertAdjacentElement(\"afterend\", element);\n  }\n  return element;\n}\n\n/**\n * Boolean convenience.\n *\n * @param {string} value\n * @param {object} [rules=DCC_RULES_REQUIRED]\n * @returns {boolean}\n */\nexport function isDccAddressValid(value, rules = DCC_RULES_REQUIRED) {\n  return getDccAddressError(value, rules) === null;\n}\n\n/**\n * Apply useful numeric attributes to an input (UX polish).\n *\n * @param {HTMLInputElement} input\n * @param {number} [maxDigits=4]\n * @returns {void}\n */\nexport function applyNumericInputAttributes(input, maxDigits = 4) {\n  if (!input) return;\n  input.setAttribute(\"inputmode\", \"numeric\");\n  input.setAttribute(\"pattern\", \"\\\\d*\");\n  input.setAttribute(\"autocomplete\", \"off\");\n  input.setAttribute(\"maxlength\", String(maxDigits));\n}\n\n/**\n * Render validation state to UI (aria-invalid, inline message, disable save).\n *\n * @param {object} opts\n * @param {HTMLInputElement} opts.input\n * @param {HTMLElement}      [opts.errorEl]\n * @param {HTMLButtonElement}[opts.saveButton]\n * @param {HTMLButtonElement}[opts.writeDccButton]\n * @param {object}           [opts.rules]\n * @param {boolean}          [opts.disableSaveWhenInvalid=true]\n * @returns {boolean} True if valid, false otherwise.\n */\nexport function renderDccValidation({\n  input,\n  errorEl,\n  saveButton,\n  writeDccButton,\n  rules = {},\n  disableSaveWhenInvalid = true,\n}) {\n  if (!input) return true;\n\n  const msg = getDccAddressError(input.value, rules);\n  if (errorEl) errorEl.textContent = msg || \"\";\n  input.setAttribute(\"aria-invalid\", msg ? \"true\" : \"false\");\n\n  if (saveButton && disableSaveWhenInvalid) {\n    saveButton.disabled = !!msg;\n    if (writeDccButton) writeDccButton.disabled = !!msg;\n  }\n\n  return !msg;\n}\n\n/**\n * Attach live validation to an input (and run once immediately).\n *\n * @param {object} opts\n * @param {HTMLInputElement}  opts.input\n * @param {HTMLButtonElement} [opts.saveButton]\n * @param {HTMLButtonElement} [opts.writeDccButton]\n * @param {object}            [opts.rules]\n * @param {string}            [opts.errorId=\"dccAddressError\"]\n * @param {boolean}           [opts.disableSaveWhenInvalid=true]\n * @returns {() => void} Detach function.\n */\nexport function setupLiveDccValidation({\n  input,\n  saveButton,\n  writeDccButton,\n  rules = {},\n  errorId = \"dccAddressError\",\n  disableSaveWhenInvalid = true,\n}) {\n  if (!input) return () => {};\n\n  applyNumericInputAttributes(input, rules.maxDigits ?? 4);\n  const errorEl = ensureInlineErrorAfter(input, errorId);\n\n  const onInput = () =>\n    renderDccValidation({\n      input,\n      errorEl,\n      saveButton,\n      writeDccButton,\n      rules,\n      disableSaveWhenInvalid,\n    });\n\n  // initial + live\n  onInput();\n  input.addEventListener(\"input\", onInput);\n\n  // detach\n  return () => input.removeEventListener(\"input\", onInput);\n}\n","// js/validation/form.js\n\n/**\n * Create a normalized snapshot of a form’s current values.\n * - Handles inputs, textareas, selects (incl. multiple)\n * - Radios are grouped by name; value is the checked one (or \"\")\n * - Checkboxes use boolean checked\n * - Hidden and standard inputs included\n * - Skips elements with [data-dirty-ignore]\n * - By default ignores disabled fields; pass includeDisabled:true to include them\n *\n * @param {HTMLFormElement} form - The form element to snapshot.\n * @param {{ trim?: boolean, includeDisabled?: boolean, includeFiles?: boolean }} [options]\n *   - trim: Trim string values (default true)\n *   - includeDisabled: Include disabled fields (default false)\n *   - includeFiles: Include file inputs (as file names) (default false)\n * @returns {Record<string, unknown>} A plain object of field values keyed by name/id.\n */\nexport function snapshotForm(\n  form,\n  { trim = true, includeDisabled = false, includeFiles = false } = {}\n) {\n  const snapshot = {};\n  if (!form) return snapshot;\n\n  /* Prefer a stable key: name → id → auto */\n  const keyFor = (element, index) => {\n    if (element.name) return element.name;\n    if (element.id) return `#${element.id}`;\n    return `__field_${index}`;\n  };\n\n  // Track radio groups we’ve handled so we set one key per group\n  const seenRadioGroups = new Set();\n\n  const elements = Array.from(form.elements || []);\n  elements.forEach((element, index) => {\n    if (!element || element.matches?.(\"[data-dirty-ignore]\")) return;\n    if (!includeDisabled && element.disabled) return;\n\n    const type = (element.type || \"\").toLowerCase();\n    const tag = (element.tagName || \"\").toLowerCase();\n    const key = keyFor(element, index);\n\n    if (type === \"radio\") {\n      if (!element.name) return; // ignore nameless radios\n      if (seenRadioGroups.has(element.name)) return;\n      seenRadioGroups.add(element.name);\n\n      const checked = form.querySelector(\n        `input[type=\"radio\"][name=\"${CSS.escape(element.name)}\"]:checked`\n      );\n      snapshot[element.name] = checked ? checked.value : \"\";\n      return;\n    }\n\n    if (type === \"checkbox\") {\n      snapshot[key] = !!element.checked;\n      return;\n    }\n\n    if (tag === \"select\" && element.multiple) {\n      const selectedValues = Array.from(element.selectedOptions || []).map(\n        (optionElement) => optionElement.value\n      );\n      snapshot[key] = selectedValues;\n      return;\n    }\n\n    if (type === \"file\") {\n      if (!includeFiles) return; // usually excluded from dirty compare\n      const fileNames = Array.from(element.files || []).map((fileItem) => fileItem.name);\n      snapshot[key] = fileNames;\n      return;\n    }\n\n    // Default: string value\n    let value = element.value ?? \"\";\n    if (trim && typeof value === \"string\") value = value.trim();\n    snapshot[key] = value;\n  });\n\n  return snapshot;\n}\n\n/**\n * Track whether a form is \"dirty\" (different from its baseline snapshot).\n * Calls onDirtyChange(dirty:boolean) whenever the dirty state changes.\n *\n * @param {{ form: HTMLFormElement, onDirtyChange?: (dirty: boolean) => void }} params\n * @returns {{\n *   isDirty: () => boolean,\n *   refresh: () => boolean,\n *   resetBaseline: () => void,\n *   detach: () => void,\n *   getSnapshot: () => Record<string, unknown>\n * }}\n */\nexport function trackFormDirty({ form, onDirtyChange } = {}) {\n  if (!form) {\n    return {\n      isDirty: () => false,\n      refresh: () => false,\n      resetBaseline: () => {},\n      detach: () => {},\n      getSnapshot: () => ({}),\n    };\n  }\n\n  let baseline = snapshotForm(form);\n  let lastDirty = false;\n\n  const computeDirty = () => {\n    const current = snapshotForm(form);\n    const dirty = JSON.stringify(current) !== JSON.stringify(baseline);\n    if (dirty !== lastDirty) {\n      lastDirty = dirty;\n      onDirtyChange?.(dirty);\n    }\n    return dirty;\n  };\n\n  const handler = () => computeDirty();\n\n  // initial eval + listeners\n  computeDirty();\n  form.addEventListener(\"input\", handler);\n  form.addEventListener(\"change\", handler);\n\n  return {\n    isDirty: () => lastDirty,\n    refresh: () => computeDirty(),\n    resetBaseline: () => {\n      baseline = snapshotForm(form);\n      computeDirty();\n    },\n    detach: () => {\n      form.removeEventListener(\"input\", handler);\n      form.removeEventListener(\"change\", handler);\n    },\n    getSnapshot: () => snapshotForm(form),\n  };\n}\n\n/**\n * Convert an arbitrary string into a safe file base (no extension),\n * preserving letters, numbers, underscores, hyphens, and dots.\n *\n * @param {string} id - Source identifier to sanitize.\n * @returns {string} A safe, non-empty filename base (e.g., \"unnamed\" if empty).\n */\nexport function toSafeFileBase(id) {\n  return (\n    String(id)\n      .trim()\n      .replace(/[^\\w.-]+/g, \"_\")\n      .replace(/^_+|_+$/g, \"\") || \"unnamed\"\n  );\n}\n","// js/ui/header.js\nimport { getRailroadName } from \"../services/jmri.js\";\n\n/**\n * Fetch the railroad name from the server and render it into the header element.\n * Falls back to \"My Railroad\" on error.\n *\n * @param {string} [selector=\"#railroadName\"] - CSS selector for the header element.\n * @returns {Promise<void>}\n */\nexport async function renderRailroadName(selector = \"#railroadName\") {\n  const headerElement = document.querySelector(selector);\n  if (!headerElement) return;\n\n  try {\n    const name = await getRailroadName();\n    headerElement.textContent = name || \"My Railroad\";\n  } catch {\n    headerElement.textContent = \"My Railroad\";\n  }\n}\n","// js/ui/dom.js\nimport { renderRailroadName } from \"./header.js\";\n\n/**\n * Escape a string for safe HTML insertion.\n *\n * @param {unknown} value - Any value; will be stringified.\n * @returns {string} Escaped HTML string.\n */\nexport function escapeHtml(value) {\n  return (value ?? \"\")\n    .toString()\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\");\n}\n\n/**\n * Initialize DOM-driven UI bits that need initial data.\n *\n * @returns {Promise<void>}\n */\nexport async function initDom() {\n  await renderRailroadName();\n}\n\n/**\n * Query a single element within an optional root.\n *\n * @param {string} selector\n * @param {ParentNode} [root=document]\n * @returns {HTMLElement|null}\n */\nexport function query(selector, root = document) {\n  return root.querySelector(selector);\n}\n\n/**\n * Set the value of an input-like element selected by CSS selector.\n *\n * @param {string} selector\n * @param {string} [value=\"\"]\n * @returns {void}\n */\nexport function setInputValue(selector, value = \"\") {\n  const element = /** @type {HTMLInputElement | HTMLTextAreaElement | null} */ (query(selector));\n  if (element) element.value = value;\n}\n\n/**\n * Get the trimmed value of an input-like element selected by CSS selector.\n *\n * @param {string} selector\n * @returns {string}\n */\nexport function getInputValue(selector) {\n  const element = /** @type {HTMLInputElement | HTMLTextAreaElement | null} */ (query(selector));\n  return element?.value?.trim() ?? \"\";\n}\n\n/**\n * Determine whether a checkbox/radio element is checked. Accepts a selector or element.\n *\n * @param {string | HTMLInputElement} selectorOrElement\n * @returns {boolean}\n */\nexport function isElementChecked(selectorOrElement) {\n  const element =\n    typeof selectorOrElement === \"string\"\n      ? /** @type {HTMLInputElement | null} */ (query(selectorOrElement))\n      : selectorOrElement;\n  return !!element?.checked;\n}\n\n/**\n * Set the src of an <img> (or img-like) element selected by CSS selector.\n *\n * @param {string} selector\n * @param {string} [src=\"\"]\n * @returns {void}\n */\nexport function setImageSource(selector, src = \"\") {\n  const element = /** @type {HTMLImageElement | null} */ (query(selector));\n  if (element) element.src = src || \"\";\n}\n\n/**\n * Build a roster icon URL for a given roster ID, with cache-busting.\n *\n * @param {string} id\n * @returns {string}\n */\nexport function buildRosterIconUrlForId(id) {\n  const trimmedId = (id || \"\").trim();\n  if (!trimmedId) return \"\";\n  return `/api/roster/icon?id=${encodeURIComponent(trimmedId)}&v=${Date.now()}`;\n}\n","// js/ui/tabs.js\n// Accessible tab wiring for any container (dialog, panel, etc.)\n\n/**\n * Initialize all tablists within a root element.\n * - Click switches tabs\n * - Arrow keys may be wired by the host if desired\n *\n * @param {HTMLElement|Document} [root=document] - Root node to search within.\n * @returns {void}\n */\nexport function initTabs(root = document) {\n  const tabLists = root.querySelectorAll('[role=\"tablist\"]');\n  tabLists.forEach((tabList) => wireTabList(tabList));\n}\n\n/**\n * Wire a single tablist element:\n * - Ensures one tab is marked selected\n * - Shows the corresponding panel\n * - Wires click handlers for activation\n *\n * @param {Element} tabList - The container with role=\"tablist\".\n * @returns {void}\n */\nfunction wireTabList(tabList) {\n  const tabs = Array.from(tabList.querySelectorAll('[role=\"tab\"]'));\n  if (tabs.length === 0) return;\n\n  // Ensure one tab is active\n  const anySelected = tabs.some((tabEl) => tabEl.getAttribute(\"aria-selected\") === \"true\");\n  if (!anySelected) {\n    tabs[0].setAttribute(\"aria-selected\", \"true\");\n  }\n  updatePanelsForTabs(tabs);\n\n  // Click → activate\n  tabs.forEach((tabEl) => {\n    tabEl.addEventListener(\"click\", () => {\n      activateTab(tabEl, tabs);\n    });\n  });\n}\n\n/**\n * Activate a given tab, update aria-selected on all, and show its panel.\n *\n * @param {Element} nextTab - The tab to activate.\n * @param {Element[]} allTabs - All sibling tabs in the tablist.\n * @param {{ focus?: boolean }} [opts] - Optional behavior flags.\n * @returns {void}\n */\nfunction activateTab(nextTab, allTabs, opts = {}) {\n  const { focus = false } = opts;\n\n  allTabs.forEach((tabEl) => {\n    tabEl.setAttribute(\"aria-selected\", tabEl === nextTab ? \"true\" : \"false\");\n  });\n  updatePanelsForTabs(allTabs);\n\n  if (focus) nextTab.focus();\n}\n\n/**\n * Given a set of tabs, hide all controlled panels and show the active one.\n *\n * @param {Element[]} tabs - Tabs that control panels via aria-controls.\n * @returns {void}\n */\nfunction updatePanelsForTabs(tabs) {\n  const controlledIds = tabs\n    .map((tabEl) => tabEl.getAttribute(\"aria-controls\"))\n    .filter(Boolean);\n\n  // Hide all controlled panels first\n  controlledIds.forEach((panelId) => {\n    const panelEl = document.getElementById(panelId);\n    if (panelEl) panelEl.hidden = true;\n  });\n\n  // Show the active panel\n  const activeTab = tabs.find((tabEl) => tabEl.getAttribute(\"aria-selected\") === \"true\");\n  if (activeTab) {\n    const panelId = activeTab.getAttribute(\"aria-controls\");\n    const panelEl = panelId ? document.getElementById(panelId) : null;\n    if (panelEl) panelEl.hidden = false;\n  }\n}\n\n/**\n * Ensure a dialog opens on a default tab and is scrolled to the top.\n * - If defaultPanelId is provided, activates the tab that controls it.\n * - Otherwise, activates the first tab.\n * - Then scrolls .modal-body (or the dialog itself) to top.\n *\n * @param {HTMLElement} dialogElement - The dialog element hosting the tabs.\n * @param {string|null} [defaultPanelId=null] - Optional panel id to activate.\n * @returns {void}\n */\nexport function resetDialogTabsAndScroll(dialogElement, defaultPanelId = null) {\n  if (!dialogElement) return;\n\n  const tabButtons = Array.from(dialogElement.querySelectorAll('[role=\"tab\"]'));\n  let tabToActivate = null;\n\n  if (defaultPanelId) {\n    tabToActivate =\n      tabButtons.find(\n        (button) =>\n          button.getAttribute(\"aria-controls\") === defaultPanelId ||\n          button.dataset.panel === defaultPanelId ||\n          button.dataset.target === defaultPanelId\n      ) || null;\n  }\n  if (!tabToActivate) {\n    tabToActivate = tabButtons[0] || null;\n  }\n\n  if (tabToActivate) {\n    activateTabButton(dialogElement, tabToActivate);\n  }\n\n  const scrollContainer = dialogElement.querySelector(\".modal-body\") || dialogElement;\n  scrollContainer.scrollTop = 0;\n}\n\n/**\n * Activate a specific tab button and show its panel.\n * Works with tabs that use [role=\"tab\"] + [role=\"tabpanel\"] and\n * either aria-controls=\"<panelId>\" or data-panel / data-target.\n *\n * @param {HTMLElement} dialogElement - Container element hosting tabs and panels.\n * @param {Element} tabButtonElement - The tab button to activate.\n * @returns {void}\n */\nfunction activateTabButton(dialogElement, tabButtonElement) {\n  const allTabButtons = dialogElement.querySelectorAll('[role=\"tab\"]');\n  const allPanels = dialogElement.querySelectorAll('[role=\"tabpanel\"]');\n\n  // De-select all tabs\n  allTabButtons.forEach((buttonEl) => buttonEl.setAttribute(\"aria-selected\", \"false\"));\n\n  // Select this one\n  tabButtonElement.setAttribute(\"aria-selected\", \"true\");\n\n  // Find its target panel id\n  const targetPanelId =\n    tabButtonElement.getAttribute(\"aria-controls\") ||\n    tabButtonElement.dataset.panel ||\n    tabButtonElement.dataset.target ||\n    \"\";\n\n  // Show only the target panel\n  allPanels.forEach((panelEl) => {\n    panelEl.hidden = panelEl.id !== targetPanelId;\n  });\n}\n","import { identifyDecoderFromLoco, getDecoder } from \"../../../services/jmri.js\";\nimport { showToast } from \"../../../ui/toast.js\";\nimport { busyWhile } from \"../../../ui/busy.js\";\n\n/* =========================================================\n * Primary actions\n * ========================================================= */\n\n/**\n * Handle click on “Read from Loco”.\n * - Reads the decoder from the programming track.\n * - Populates the select with unique candidates + variants.\n * - Updates placeholder to “N Options Found...”.\n * - Tries to auto-select the saved/“preferred” decoder (if any).\n *\n * @param {HTMLSelectElement} selectElement - The <select> element to populate.\n * @returns {Promise<void>} A promise that resolves after the UI is updated.\n */\nexport async function onClickReadDccChip(selectElement) {\n  try {\n    await busyWhile(async () => {\n      const dccChipList = await identifyDecoderFromLoco();\n\n      // Use any preferred selection captured by preload (if present)\n      const preferred = {\n        family: (selectElement?.dataset?.preferredFamily || \"\").trim(),\n        model: (selectElement?.dataset?.preferredModel || \"\").trim(),\n      };\n\n      populateDecoderSelectWithDccChipList(selectElement, dccChipList, preferred);\n    }, \"Reading DCC Decoder...\");\n  } catch (err) {\n    // If you have a toast util in scope; otherwise remove this\n    showToast?.(err?.message || \"Failed to read DCC decoder\");\n  }\n}\n\n/**\n * Preload the decoder selection when the dialog opens.\n * - Clears the select and shows a neutral placeholder.\n * - Attempts to load the saved decoder for this roster entry.\n * - If found, inserts it as a single option, selects it,\n *   and stores “preferred” family/model on the select so\n *   onClickReadDccChip can auto-select it later.\n *\n * @param {HTMLSelectElement} selectElement - The <select> to initialize.\n * @param {string} rosterId - The roster entry ID to fetch a saved decoder for.\n * @returns {Promise<boolean>} True if a saved decoder was added; otherwise false.\n */\nexport async function preloadDecoderSelection(selectElement, rosterId) {\n  if (!selectElement || !rosterId) return false;\n\n  // Always start with an empty select + neutral placeholder\n  resetDecoderSelect(selectElement, \"Read from Loco to find decoder...\");\n\n  // Try to load the saved decoder from your backend\n  let decoderResponse;\n  try {\n    decoderResponse = await getDecoder(rosterId);\n  } catch {\n    return false; // keep neutral placeholder\n  }\n\n  const saved = decoderResponse?.decoder;\n  if (!saved) return false;\n\n  // Attach modelId (if identify payload present)\n  saved.modelId = decoderResponse?.identify?.modelId;\n\n  const manufacturerName = (saved.manufacturer || \"\").trim();\n  const familyName = (saved.family || \"\").trim();\n  const modelName = (saved.model || \"\").trim();\n\n  // Nothing meaningful to add\n  if (!manufacturerName && !familyName && !modelName) return false;\n\n  // Add a single option for the saved decoder\n  updatePlaceholderCount(selectElement, 1);\n  const savedOption = createDecoderOptionElement({\n    manufacturer: manufacturerName,\n    family: familyName,\n    model: modelName,\n    isVariant: false,\n    mfgId: saved.manufacturerId,\n    mfgName: saved.manufacturer,\n    productId: saved.productId,\n    modelId: saved.modelId,\n    value: \"saved\", // explicit value\n  });\n\n  selectElement.appendChild(savedOption);\n  savedOption.selected = true;\n  selectElement.disabled = false;\n\n  // Stash “preferred” so the read flow can auto-select later\n  selectElement.dataset.preferredFamily = familyName;\n  selectElement.dataset.preferredModel = modelName;\n\n  return true;\n}\n\n/* =========================\n * Normalization utilities\n * ========================= */\n\n/**\n * Collapse internal whitespace and trim ends.\n *\n * @param {unknown} value - Any input to normalize into a clean string.\n * @returns {string} A trimmed, single-spaced string.\n */\nfunction cleanText(value) {\n  return String(value ?? \"\")\n    .replace(/\\s+/g, \" \")\n    .trim();\n}\n\n/**\n * Build a case-insensitive, stable key for de-duplicating by manufacturer+family+model.\n *\n * @param {string} manufacturer - The manufacturer name.\n * @param {string} family - The decoder family name.\n * @param {string} model - The model name.\n * @returns {string} A normalized dedupe key.\n */\nfunction makeOptionKey(manufacturer, family, model) {\n  return [\n    cleanText(manufacturer).toLowerCase(),\n    cleanText(family).toLowerCase(),\n    cleanText(model).toLowerCase(),\n  ].join(\"|\");\n}\n\n/* =========================================\n * Build flat, duplicate-free option metadata\n * ========================================= */\n\n/**\n * From `dccChipList`, build a flat array of unique options:\n *  - one for the candidate\n *  - one for each variant (model from the variant string, same family as candidate)\n * Duplicates are removed by (manufacturer, family, model), case-insensitive.\n *\n * @param {object} dccChipList - The identify payload containing candidates and identify info.\n * @param {Array<object>} dccChipList.candidates - Candidate decoder items.\n * @param {object} dccChipList.identify - The identify block (ids and names).\n * @returns {Array<object>} Array of unique option metadata objects.\n */\nfunction buildDecoderOptionMetadataFromDccChipList(dccChipList) {\n  const uniqueOptionMetadataList = [];\n  const seenKeys = new Set();\n\n  const candidates = Array.isArray(dccChipList?.candidates) ? dccChipList.candidates : [];\n  const identifiedValues = dccChipList?.identify ?? {};\n\n  for (let i = 0; i < candidates.length; i++) {\n    const candidate = candidates[i] || {};\n\n    const manufacturerName = cleanText(candidate.manufacturer);\n    const familyName = cleanText(candidate.family);\n    const candidateModelName = cleanText(candidate.model);\n\n    // ---- Candidate option ---------------------------------\n    const candidateKey = makeOptionKey(manufacturerName, familyName, candidateModelName);\n    if (!seenKeys.has(candidateKey)) {\n      seenKeys.add(candidateKey);\n      uniqueOptionMetadataList.push({\n        label: [manufacturerName, familyName, candidateModelName].filter(Boolean).join(\" — \"),\n        manufacturer: manufacturerName,\n        family: familyName,\n        model: candidateModelName,\n        mfgId: identifiedValues.mfgId,\n        mfgName: identifiedValues.mfgName,\n        productId: identifiedValues.productId,\n        modelId: identifiedValues.modelId,\n        isVariant: false,\n      });\n    }\n\n    // ---- Variant options ----------------------------------\n    const variants = Array.isArray(candidate.variants) ? candidate.variants : [];\n    for (let variantIndex = 0; variantIndex < variants.length; variantIndex++) {\n      const variantModelName = cleanText(variants[variantIndex]);\n      if (!variantModelName) continue;\n\n      const variantKey = makeOptionKey(manufacturerName, familyName, variantModelName);\n      if (seenKeys.has(variantKey)) continue; // skip duplicates globally\n\n      seenKeys.add(variantKey);\n      uniqueOptionMetadataList.push({\n        label: [manufacturerName, familyName, variantModelName].filter(Boolean).join(\" — \"),\n        manufacturer: manufacturerName,\n        family: familyName,\n        model: variantModelName,\n        mfgId: identifiedValues.mfgId,\n        mfgName: identifiedValues.mfgName,\n        productId: identifiedValues.productId,\n        modelId: identifiedValues.modelId,\n        isVariant: true,\n      });\n    }\n  }\n\n  return uniqueOptionMetadataList;\n}\n\n/* ======================================\n * Create DOM nodes for the <select> box\n * ====================================== */\n\n/**\n * Create a DocumentFragment containing:\n *  - placeholder: “N Options Found...”\n *  - an <option> for each unique candidate/variant\n *\n * @param {Array<object>} optionMetadataList - Flat list of unique option metadata.\n * @returns {DocumentFragment} A fragment ready to append into a <select>.\n */\nfunction createOptionsFragmentForDecoderSelect(optionMetadataList) {\n  const fragment = document.createDocumentFragment();\n\n  const placeholderOption = document.createElement(\"option\");\n  placeholderOption.value = \"\";\n  placeholderOption.disabled = true;\n  placeholderOption.selected = true;\n  placeholderOption.textContent = `${optionMetadataList.length} Options Found...`;\n  fragment.appendChild(placeholderOption);\n\n  optionMetadataList.forEach((meta, index) => {\n    const option = createDecoderOptionElement({\n      ...meta,\n      value: String(index), // arbitrary UI value; payload is in data-*\n    });\n    fragment.appendChild(option);\n  });\n\n  return fragment;\n}\n\n/**\n * Clear and populate a <select> element from dccChipList (duplicates removed).\n * Optionally provide {family, model} to auto-select that choice if present.\n *\n * @param {HTMLSelectElement} selectElement - The target <select> element.\n * @param {object} dccChipList - Identify payload containing candidates and identify info.\n * @param {{family?: string, model?: string}} [preferred] - Preferred family/model to auto-select.\n * @returns {Array<object>} The flattened, unique option metadata array.\n */\nfunction populateDecoderSelectWithDccChipList(\n  selectElement,\n  dccChipList,\n  preferred // { family?: string, model?: string }\n) {\n  const uniqueOptionMetadataList = buildDecoderOptionMetadataFromDccChipList(dccChipList);\n  const fragment = createOptionsFragmentForDecoderSelect(uniqueOptionMetadataList);\n\n  selectElement.innerHTML = \"\";\n  selectElement.appendChild(fragment);\n  selectElement.disabled = false;\n\n  // Try to auto-select a preferred family/model if provided\n  if (preferred && (preferred.family || preferred.model)) {\n    selectOptionByFamilyModel(selectElement, preferred.family, preferred.model);\n  }\n\n  return uniqueOptionMetadataList;\n}\n\n/**\n * Get the chosen decoder data from the select.\n *\n * @param {HTMLSelectElement} selectElement - The <select> element to read.\n * @returns {null|{ family: string, model: string, manufacturer: string, isVariant: boolean, mfgId?: string, productId?: string, mfgName?: string, modelId?: string }} The chosen decoder payload, or null if none selected.\n */\nexport function getChosenDecoderFromSelect(selectElement) {\n  const chosen = selectElement.selectedOptions?.[0];\n  if (!chosen || !chosen.value) return null;\n\n  const mfgId = chosen?.dataset?.mfgId ?? undefined;\n  const productId = chosen?.dataset?.productId ?? undefined;\n  const mfgName = chosen?.dataset?.mfgName ?? undefined;\n  const modelId = chosen?.dataset?.modelId ?? undefined;\n\n  return {\n    family: chosen.dataset.family || \"\",\n    model: chosen.dataset.model || \"\",\n    manufacturer: chosen.dataset.manufacturer || \"\",\n    isVariant: chosen.dataset.isVariant === \"true\",\n    mfgId,\n    productId,\n    mfgName,\n    modelId,\n  };\n}\n\n/* ---------------------------\n * Helper functions (local)\n * --------------------------- */\n\n/**\n * Remove all options and insert a placeholder row.\n *\n * @param {HTMLSelectElement} selectElement - The select element to reset.\n * @param {string} placeholderText - Placeholder text to display.\n * @returns {void}\n */\nexport function resetDecoderSelect(selectElement, placeholderText) {\n  selectElement.innerHTML = \"\";\n  const placeholderOption = document.createElement(\"option\");\n  placeholderOption.value = \"\";\n  placeholderOption.dataset.placeholder = \"true\";\n  placeholderOption.disabled = true;\n  placeholderOption.selected = true;\n  placeholderOption.textContent = placeholderText;\n  selectElement.appendChild(placeholderOption);\n  selectElement.disabled = false; // keep enabled so the UI feels responsive\n}\n\n/**\n * Update the placeholder text to “N Options Found...”.\n *\n * @param {HTMLSelectElement} selectElement - The select element containing the placeholder option.\n * @param {number} count - The number of options found.\n * @returns {void}\n */\nfunction updatePlaceholderCount(selectElement, count) {\n  const placeholder = selectElement.querySelector('option[data-placeholder=\"true\"]');\n  if (placeholder) {\n    placeholder.textContent = `${count} Options Found...`;\n  }\n}\n\n/**\n * Create a single <option> element carrying all the decoder metadata.\n *\n * @param {object} params - The option configuration.\n * @param {string} [params.manufacturer] - Manufacturer name.\n * @param {string} [params.family] - Family name.\n * @param {string} [params.model] - Model name.\n * @param {boolean} [params.isVariant=false] - Whether this entry is a variant.\n * @param {string|number} [params.mfgId] - Manufacturer ID.\n * @param {string|number} [params.productId] - Product ID.\n * @param {string} [params.mfgName] - Manufacturer display name.\n * @param {string|number} [params.modelId] - Model ID.\n * @param {string} [params.value=\"opt\"] - The <option> value attribute.\n * @returns {HTMLOptionElement} The populated option element.\n */\nfunction createDecoderOptionElement({\n  manufacturer = \"\",\n  family = \"\",\n  model = \"\",\n  isVariant = false,\n  mfgId,\n  productId,\n  mfgName,\n  modelId,\n  value = \"opt\",\n}) {\n  const option = document.createElement(\"option\");\n  option.value = value; // UI value; rely on data-* for payload\n  option.textContent = [manufacturer, family, model].filter(Boolean).join(\" — \") || \"Saved Decoder\";\n\n  // Attach payload for later save\n  option.dataset.manufacturer = manufacturer;\n  option.dataset.family = family;\n  option.dataset.model = model;\n  option.dataset.isVariant = String(!!isVariant);\n  if (mfgId !== null && mfgId !== undefined) option.dataset.mfgId = String(mfgId);\n  if (productId !== null && productId !== undefined) option.dataset.productId = String(productId);\n  if (mfgName !== null && mfgName !== undefined) option.dataset.mfgName = String(mfgName);\n  if (modelId !== null && modelId !== undefined) option.dataset.modelId = String(modelId);\n\n  return option;\n}\n\n/**\n * Select the first option that matches family+model (case-insensitive).\n *\n * @param {HTMLSelectElement} selectElement - The select element to search within.\n * @param {string} [family] - Family name to match (optional).\n * @param {string} [model] - Model name to match (optional).\n * @returns {boolean} True if a matching option was selected; otherwise false.\n */\nfunction selectOptionByFamilyModel(selectElement, family, model) {\n  const targetFamily = (family || \"\").toLowerCase().trim();\n  const targetModel = (model || \"\").toLowerCase().trim();\n  for (const opt of selectElement.options) {\n    if (!opt.value) continue; // skip placeholder\n    const optFamily = (opt.dataset.family || \"\").toLowerCase();\n    const optModel = (opt.dataset.model || \"\").toLowerCase();\n    if (\n      (targetFamily ? optFamily === targetFamily : true) &&\n      (targetModel ? optModel === targetModel : true)\n    ) {\n      opt.selected = true;\n      return true;\n    }\n  }\n  return false;\n}\n","// js/controllers/roster/dialog/infoTab.js\n\nimport { readAddressFromTrack, writeAddressToTrack } from \"../../../services/jmri.js\";\nimport { LOCO_DIALOG_SELECTORS } from \"../dialog.js\";\nimport { preloadDecoderSelection, resetDecoderSelect } from \"./decoderSelect.js\";\nimport { busyWhile } from \"../../../ui/busy.js\";\nimport { showToast } from \"../../../ui/toast.js\";\nimport { query, setInputValue, setImageSource, buildRosterIconUrlForId } from \"../../../ui/dom.js\";\n\n/* -------------------------- Public API: load -------------------------- */\n/**\n * Populate the Info tab from a normalized roster record.\n * Preserves behavior from the working version.\n *\n * @param {object} record - The normalized roster record.\n * @param {string} [record.id] - Loco ID.\n * @param {string} [record.title] - Loco title fallback for ID.\n * @param {string} [record.address] - DCC address.\n * @param {string} [record.road] - Road name.\n * @param {string} [record.number] - Loco number.\n * @param {string} [record.model] - Model.\n * @param {string} [record.owner] - Owner.\n * @param {string} [record.file] - File name.\n * @param {{ fileName?: string }} [record.data] - Optional nested file info.\n * @param {string} [record.imageUrl] - Existing image URL.\n * @param {boolean} [prefill=false] - If true, keep existing image URL exactly; otherwise, default to roster icon if no explicit image URL.\n * @returns {void}\n */\nexport function loadInfoTab(record, prefill = false) {\n  const locoId = record?.id || record?.title || \"\";\n  const dccAddress = record?.address || \"\";\n  const roadName = record?.road || \"\";\n  const locoNumber = record?.number || \"\";\n  const locoModel = record?.model || \"\";\n  const locoOwner = record?.owner || \"\";\n  const fileName = record?.file || record?.data?.fileName || \"\";\n  const imageSrc = record?.imageUrl\n    ? `${record.imageUrl}&v=${Date.now()}`\n    : buildRosterIconUrlForId(locoId);\n\n  preloadDecoderSelection(query(LOCO_DIALOG_SELECTORS.decoderSelect), locoId);\n\n  if (prefill) {\n    existingImageUrl = record?.imageUrl || \"\";\n  } else {\n    existingImageUrl = locoId\n      ? `/api/roster/icon?id=${encodeURIComponent(locoId)}`\n      : record?.imageUrl || \"\";\n  }\n\n  setInputValue(LOCO_DIALOG_SELECTORS.id, locoId);\n  setInputValue(LOCO_DIALOG_SELECTORS.dcc, dccAddress);\n  setInputValue(LOCO_DIALOG_SELECTORS.road, roadName);\n  setInputValue(LOCO_DIALOG_SELECTORS.number, locoNumber);\n  setInputValue(LOCO_DIALOG_SELECTORS.model, locoModel);\n  setInputValue(LOCO_DIALOG_SELECTORS.owner, locoOwner);\n  setInputValue(LOCO_DIALOG_SELECTORS.file, fileName);\n  setInputValue(LOCO_DIALOG_SELECTORS.imageUrl, imageSrc);\n  setImageSource(LOCO_DIALOG_SELECTORS.imageEl, imageSrc);\n}\n\n/**\n * Clear all Info tab fields (used for Create).\n *\n * @returns {void}\n */\nexport function resetInfoTab() {\n  setInputValue(LOCO_DIALOG_SELECTORS.id, \"\");\n  setInputValue(LOCO_DIALOG_SELECTORS.dcc, \"\");\n  setInputValue(LOCO_DIALOG_SELECTORS.road, \"\");\n  setInputValue(LOCO_DIALOG_SELECTORS.number, \"\");\n  setInputValue(LOCO_DIALOG_SELECTORS.model, \"\");\n  setInputValue(LOCO_DIALOG_SELECTORS.owner, \"\");\n  setInputValue(LOCO_DIALOG_SELECTORS.file, \"\");\n  setInputValue(LOCO_DIALOG_SELECTORS.imageUrl, \"\");\n  setImageSource(LOCO_DIALOG_SELECTORS.imageEl, \"\");\n  resetDecoderSelect(\n    query(LOCO_DIALOG_SELECTORS.decoderSelect),\n    \"Read from Loco to find decoder...\"\n  );\n}\n\n/* ----------------------- Public API: collect -------------------------- */\n/**\n * Collect all Info tab values into a single object.\n *\n * @returns {{ id:string, address:string, road:string, number:string, model:string, owner:string, file:string, imageUrl:string }} The collected form values.\n */\nexport function collectInfoForm() {\n  const id = query(LOCO_DIALOG_SELECTORS.id)?.value?.trim() || \"\";\n  const dcc = query(LOCO_DIALOG_SELECTORS.dcc)?.value?.trim() || \"\";\n  const road = query(LOCO_DIALOG_SELECTORS.road)?.value?.trim() || \"\";\n  const number = query(LOCO_DIALOG_SELECTORS.number)?.value?.trim() || \"\";\n  const model = query(LOCO_DIALOG_SELECTORS.model)?.value?.trim() || \"\";\n  const owner = query(LOCO_DIALOG_SELECTORS.owner)?.value?.trim() || \"\";\n  const file = query(LOCO_DIALOG_SELECTORS.file)?.value?.trim() || \"\";\n  const imageUrl = query(LOCO_DIALOG_SELECTORS.imageUrl)?.value?.trim() || \"\";\n\n  return { id, address: dcc, road, number, model, owner, file, imageUrl };\n}\n\n/* -------------------- Image selection & preview ----------------------- */\nlet pickedImageFile = null;\nlet existingImageUrl = \"\";\n\n/**\n * Clear any in-memory image selection state.\n *\n * @returns {void}\n */\nexport function clearImageMemory() {\n  pickedImageFile = null;\n  existingImageUrl = \"\";\n}\n\n/**\n * Wire the image dropzone and file picker once (idempotent).\n *\n * @returns {void}\n */\nexport function initInfoImagePicker() {\n  const dropZoneEl = query(LOCO_DIALOG_SELECTORS.dropZone);\n  const fileInputEl = query(LOCO_DIALOG_SELECTORS.fileInput);\n  const imageEl = query(LOCO_DIALOG_SELECTORS.imageEl);\n  if (!dropZoneEl || !fileInputEl || !imageEl) return;\n\n  // Idempotent: clear existing listeners by cloning input (cheap & clean)\n  fileInputEl.replaceWith(fileInputEl.cloneNode(true));\n  const freshInputEl = query(LOCO_DIALOG_SELECTORS.fileInput);\n\n  // Click to open file picker\n  dropZoneEl.addEventListener(\"click\", () => freshInputEl?.click());\n\n  // Drag & drop hover states\n  [\"dragenter\", \"dragover\"].forEach((eventName) =>\n    dropZoneEl.addEventListener(eventName, (subEvent) => {\n      subEvent.preventDefault();\n      subEvent.stopPropagation();\n      dropZoneEl.classList.add(\"drag\");\n    })\n  );\n  [\"dragleave\", \"drop\"].forEach((eventName) =>\n    dropZoneEl.addEventListener(eventName, (subEvent) => {\n      subEvent.preventDefault();\n      subEvent.stopPropagation();\n      dropZoneEl.classList.remove(\"drag\");\n    })\n  );\n\n  // File dropped\n  dropZoneEl.addEventListener(\"drop\", (event) => {\n    const file = event.dataTransfer?.files?.[0];\n    if (file) previewPickedImageFile(file, imageEl);\n  });\n\n  // File chosen via input\n  freshInputEl.addEventListener(\"change\", () => {\n    const file = freshInputEl.files?.[0];\n    if (file) previewPickedImageFile(file, imageEl);\n  });\n}\n\n/**\n * Preview a picked image file by creating an object URL and setting <img src>.\n *\n * @param {File} file - The picked image file.\n * @param {HTMLImageElement} imageEl - The preview image element.\n * @returns {void}\n */\nfunction previewPickedImageFile(file, imageEl) {\n  pickedImageFile = file;\n  const objectUrl = URL.createObjectURL(file);\n  imageEl.src = objectUrl;\n}\n\n/**\n * Return the file the user picked (or null).\n *\n * @returns {File|null} The picked image file.\n */\nexport function getPickedImageFile() {\n  return pickedImageFile;\n}\n\n/**\n * Return the current preview <img> src (for persistence decisions).\n *\n * @returns {string} The existing image URL or an empty string.\n */\nexport function getExistingImageSrc() {\n  return existingImageUrl || \"\";\n}\n\n/* ----------------------- Persistence decisions ------------------------ */\n/**\n * Convert a relative/absolute path to an absolute same-origin URL.\n *\n * @param {string} pathOrUrl - Input path or URL.\n * @returns {string} Absolute same-origin URL, or empty string on failure.\n */\nfunction toAbsoluteSameOriginUrl(pathOrUrl) {\n  try {\n    return new URL(pathOrUrl, window.location.origin).toString();\n  } catch {\n    return \"\";\n  }\n}\n\n/**\n * Fetch an image URL (e.g., the preview src) and wrap it as a File for upload.\n * Returns null if it can't be fetched. The filename is derived from rosterId and blob MIME.\n *\n * @param {string} imageUrl - The URL to fetch.\n * @param {string} rosterId - Used to build a safe filename.\n * @returns {Promise<File|null>} The fetched file or null on failure.\n */\nasync function fetchUrlAsFile(imageUrl, rosterId) {\n  if (!imageUrl) return null;\n  const absoluteUrl = toAbsoluteSameOriginUrl(imageUrl);\n  if (!absoluteUrl) return null;\n\n  try {\n    const response = await fetch(absoluteUrl, { credentials: \"same-origin\" });\n    if (!response.ok) return null;\n\n    const blob = await response.blob();\n    const mime = blob.type || \"image/jpeg\";\n    const ext =\n      mime === \"image/png\"\n        ? \"png\"\n        : mime === \"image/webp\"\n          ? \"webp\"\n          : mime === \"image/gif\"\n            ? \"gif\"\n            : mime === \"image/svg+xml\"\n              ? \"svg\"\n              : \"jpg\";\n\n    const safeId = (rosterId || \"image\").replace(/[^\\w.-]+/g, \"_\");\n    return new File([blob], `${safeId}.${ext}`, { type: mime });\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Decide how to persist the image on save.\n * - If a new file is picked: upload that file; omit image string.\n * - Else if preview shows a non-blob URL: fetch+wrap and upload that; omit image string.\n * - Else: no image → send image: \"\" to clear.\n *\n * @param {object} params - Decision inputs.\n * @param {File|null} params.pickedFile - File selected by the user, if any.\n * @param {string} params.existingSrc - Current preview image src.\n * @param {string} params.rosterId - Roster ID for naming the wrapped file.\n * @returns {Promise<{fileToUpload: File|null, imageField: (string|undefined)}>} The persistence decision.\n */\nexport async function decideImagePersistence({ pickedFile, existingSrc, rosterId }) {\n  // New file wins\n  if (pickedFile) {\n    return { fileToUpload: pickedFile, imageField: undefined };\n  }\n\n  const isBlobPreview = existingSrc?.startsWith(\"blob:\");\n  if (existingSrc && !isBlobPreview) {\n    const fileFromPreview = await fetchUrlAsFile(existingSrc, rosterId);\n    if (fileFromPreview) {\n      return { fileToUpload: fileFromPreview, imageField: undefined };\n    }\n    // Fallback: if fetch fails, send the string (optional; can return \"\" instead)\n    return { fileToUpload: null, imageField: existingSrc };\n  }\n\n  // No image at all → clear\n  return { fileToUpload: null, imageField: \"\" };\n}\n\n/* ----------------------- Basic record validation ---------------------- */\n/**\n * Compatibility alias to minimize churn.\n *\n * @returns {{ id:string, address:string, road:string, number:string, model:string, owner:string, file:string, imageUrl:string }} Snapshot of the form.\n */\nexport function getInfoTabSnapshot() {\n  return collectInfoForm();\n}\n\n/* ----------------------------- Read/Write DCC ------------------------- */\n/**\n * Read the DCC address from the track and populate the form field.\n *\n * @returns {Promise<void>} Resolves when the UI has been updated.\n */\nexport async function onClickReadDcc() {\n  try {\n    await busyWhile(async () => {\n      const address = await readAddressFromTrack();\n\n      if (address !== null && String(address).trim() !== \"\") {\n        setInputValue(LOCO_DIALOG_SELECTORS.dcc, String(address).trim());\n\n        // Re-trigger live validation so Save button state updates\n        const inputEl = query(LOCO_DIALOG_SELECTORS.dcc);\n        inputEl?.dispatchEvent(new Event(\"input\", { bubbles: true }));\n\n        showToast(\"DCC address read\");\n      } else {\n        showToast(\"No address detected\");\n      }\n    }, \"Reading DCC Address...\");\n  } catch (error) {\n    showToast(error?.message || \"Failed to read DCC address\");\n  }\n}\n\n/**\n * Write the DCC address from the form to the track (service mode).\n *\n * @returns {Promise<void>} Resolves when the write completes.\n */\nexport async function onClickWriteDcc() {\n  try {\n    await busyWhile(async () => {\n      const address = collectInfoForm().address;\n      await writeAddressToTrack(address, { mode: \"service\" });\n      showToast(\"DCC address written\");\n    }, \"Writing DCC Address...\");\n  } catch (error) {\n    showToast(error?.message || \"Failed to write DCC address\");\n  }\n}\n","// js/controllers/roster/dialog/functionsTab.js\n// Functions tab: add/edit loco functions one-by-one, delete per row,\n// and copy functions from another roster entry via <select id=\"fnCopySelect\">.\n\nimport { getFunctions, saveFunctions, getRoster } from \"../../../services/jmri.js\";\nimport { showToast } from \"../../../ui/toast.js\";\nimport { escapeHtml } from \"../../../ui/dom.js\";\n\n/* ----------------------------- Selectors ----------------------------- */\nconst functionSelectors = {\n  list: \"#fnList\", // <ul class=\"fn-list\">\n  addButton: \"#fnAdd\", // \"Add Function\" button\n  copySelect: \"#fnCopySelect\", // <select> used to copy from another loco\n};\n\nconst maxFunctionNumber = 28;\n\n/* -------------------------------- State ------------------------------- */\nlet currentRosterFileName = \"\"; // e.g., \"MyLoco.xml\"\nlet hasBoundDomEvents = false;\n\n/** Source of truth for render & save. */\nlet functionRowModels = []; // [{ num, label, lockable }]\n\n/* ------------------------------ Utilities ----------------------------- */\n/**\n * Query a single DOM element.\n *\n * @param {string} selector - A CSS selector.\n * @param {ParentNode} [rootElement=document] - Root node to search within.\n * @returns {Element|null} The first matching element or null.\n */\nfunction select(selector, rootElement = document) {\n  return rootElement.querySelector(selector);\n}\n\n/**\n * Clamp a number between min and max.\n *\n * @param {number} minValue - Minimum allowed value.\n * @param {number} value - Value to clamp.\n * @param {number} maxValue - Maximum allowed value.\n * @returns {number} The clamped value.\n */\nfunction clampNumber(minValue, value, maxValue) {\n  return Math.min(maxValue, Math.max(minValue, value));\n}\n\n/**\n * Sort the in-memory function rows ascending by their number.\n *\n * @returns {void}\n */\nfunction sortFunctionRowsByNumber() {\n  functionRowModels.sort((left, right) => Number(left.num) - Number(right.num));\n}\n\n/**\n * Return first free function number in [0..maxFunctionNumber], or null if all used.\n *\n * @returns {number|null} The first available function number, or null.\n */\nfunction findNextFreeFunctionNumber() {\n  const usedNumbersSet = new Set(functionRowModels.map((row) => Number(row.num)));\n  for (let functionNumber = 0; functionNumber <= maxFunctionNumber; functionNumber += 1) {\n    if (!usedNumbersSet.has(functionNumber)) return functionNumber;\n  }\n  return null;\n}\n\n/**\n * Return desired number if free; otherwise the next free slot (or null if none).\n *\n * @param {number} desiredFunctionNumber - The preferred function number.\n * @returns {number|null} A unique available number or null if none free.\n */\nfunction findUniqueFunctionNumber(desiredFunctionNumber) {\n  const usedNumbersSet = new Set(functionRowModels.map((row) => Number(row.num)));\n  if (!usedNumbersSet.has(desiredFunctionNumber)) return desiredFunctionNumber;\n\n  for (\n    let probeNumber = desiredFunctionNumber + 1;\n    probeNumber <= maxFunctionNumber;\n    probeNumber += 1\n  ) {\n    if (!usedNumbersSet.has(probeNumber)) return probeNumber;\n  }\n  for (let wrapNumber = 0; wrapNumber < desiredFunctionNumber; wrapNumber += 1) {\n    if (!usedNumbersSet.has(wrapNumber)) return wrapNumber;\n  }\n  return null;\n}\n\n/* ------------------------------- Render ------------------------------- */\n/**\n * Render a single function row as HTML string.\n *\n * @param {{ num:number|string, label:string, lockable:boolean }} functionRowModel - Row model.\n * @returns {string} HTML string for the row.\n */\nfunction renderSingleFunctionRow(functionRowModel) {\n  const deleteIconSvg =\n    '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">' +\n    '<path d=\"M6 6l12 12M18 6L6 18\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>' +\n    \"</svg>\";\n\n  return `\n    <li class=\"fn-card\" data-fn-num=\"${functionRowModel.num}\">\n      <div class=\"fn-row\">\n        <div class=\"fn-num\">\n          <input\n            type=\"number\"\n            class=\"fn-num-input\"\n            inputmode=\"numeric\" pattern=\"\\\\d*\"\n            min=\"0\" max=\"${maxFunctionNumber}\"\n            value=\"${functionRowModel.num}\"\n            aria-label=\"Function number\"\n          >\n        </div>\n\n        <div class=\"fn-label\">\n          <input\n            type=\"text\"\n            class=\"fn-label-input\"\n            value=\"${escapeHtml(functionRowModel.label || \"\")}\"\n            placeholder=\"Label (e.g. Horn)\"\n            aria-label=\"Function label\"\n          >\n        </div>\n\n        <div class=\"fn-lock\">\n          <label class=\"row row--stack\" style=\"gap:6px\">\n            <span>Lockable</span>\n            <input type=\"checkbox\" class=\"fn-lock-input\" ${\n              functionRowModel.lockable ? \"checked\" : \"\"\n            }>\n          </label>\n        </div>\n\n        <div class=\"fn-actions\">\n          <button\n            type=\"button\"\n            class=\"icon-btn fn-delete-btn\"\n            aria-label=\"Delete function\"\n            title=\"Delete\"\n            style=\"padding:4px;border:0;background:transparent;color:#a62622\"\n          >\n            ${deleteIconSvg}\n          </button>\n        </div>\n      </div>\n    </li>\n  `;\n}\n\n/**\n * Render the entire functions list into the DOM.\n *\n * @returns {void}\n */\nfunction renderFunctionsList() {\n  const functionsListElement = select(functionSelectors.list);\n  if (!functionsListElement) return;\n\n  sortFunctionRowsByNumber();\n  functionsListElement.innerHTML = functionRowModels.map(renderSingleFunctionRow).join(\"\");\n}\n\n/* ----------------------------- Copy support --------------------------- */\n/**\n * Populate the \"Copy from…\" select with roster entries that already have\n * at least one function defined. Excludes the current loco.\n *\n * @returns {Promise<void>} Resolves when the select is populated.\n */\nasync function populateCopySourceSelect() {\n  const copySelectElement = select(functionSelectors.copySelect);\n  if (!copySelectElement) return;\n\n  // Reset options\n  copySelectElement.innerHTML = \"\";\n  const placeholderOption = document.createElement(\"option\");\n  placeholderOption.value = \"\";\n  placeholderOption.textContent = \"Copy functions from…\";\n  copySelectElement.appendChild(placeholderOption);\n\n  let rosterEntries = [];\n  try {\n    const rawRoster = await getRoster({ fresh: false });\n    rosterEntries = Array.isArray(rawRoster) ? rawRoster : [];\n  } catch {\n    // If roster cannot be fetched, leave the select in placeholder state.\n    return;\n  }\n\n  // Resolve id + file for each entry (support both raw and normalized shapes)\n  const normalizedEntries = rosterEntries\n    .map((entry) => {\n      const fileName = entry.fileName || entry.file || entry.data?.fileName || \"\";\n      const displayId = entry.id || entry.title || entry.name || entry.data?.name || \"\";\n      return { fileName, displayId };\n    })\n    .filter((entry) => entry.fileName && entry.displayId);\n\n  // Exclude the current file (if known)\n  const candidateEntries = normalizedEntries.filter(\n    (entry) => entry.fileName !== currentRosterFileName\n  );\n\n  // Load functions per candidate with a small concurrency limit\n  const candidatesWithFunctions = await fetchCandidatesWithFunctions(candidateEntries, 4);\n\n  // Sort by displayId for a predictable UI\n  candidatesWithFunctions.sort((left, right) =>\n    String(left.displayId).localeCompare(String(right.displayId), undefined, {\n      numeric: true,\n      sensitivity: \"base\",\n    })\n  );\n\n  for (const candidate of candidatesWithFunctions) {\n    const option = document.createElement(\"option\");\n    option.value = candidate.fileName; // we'll copy by fileName\n    const countLabel = ` (${candidate.functionCount})`;\n    option.textContent = `${candidate.displayId}${countLabel}`;\n    copySelectElement.appendChild(option);\n  }\n}\n\n/**\n * Fetch functions for each candidate with concurrency control; keep those with count > 0.\n *\n * @param {Array<{fileName:string, displayId:string}>} entries - Candidate roster items.\n * @param {number} [maxConcurrent=4] - Maximum concurrent fetches.\n * @returns {Promise<Array<{fileName:string, displayId:string, functionCount:number}>>} Results with at least one function.\n */\nasync function fetchCandidatesWithFunctions(entries, maxConcurrent = 4) {\n  const results = [];\n  let currentIndex = 0;\n\n  /**\n   * Background worker that fetches function lists for candidates\n   * and pushes those with count > 0 into `results`.\n   * @returns {Promise<void>}\n   */\n  async function worker() {\n    while (currentIndex < entries.length) {\n      const indexForThisWorker = currentIndex++;\n      const entry = entries[indexForThisWorker];\n      try {\n        const functionsForEntry = await getFunctions(entry.fileName);\n        if (Array.isArray(functionsForEntry) && functionsForEntry.length > 0) {\n          results.push({\n            fileName: entry.fileName,\n            displayId: entry.displayId,\n            functionCount: functionsForEntry.length,\n          });\n        }\n      } catch {\n        // Ignore failures for individual entries to keep UI resilient\n      }\n    }\n  }\n\n  const workerCount = Math.max(1, Math.min(maxConcurrent, entries.length));\n  await Promise.all(Array.from({ length: workerCount }, () => worker()));\n  return results;\n}\n\n/**\n * Copy functions from the selected source into the current in-memory model.\n *\n * @returns {Promise<void>} Resolves after copy completes and UI updates.\n */\nasync function copyFunctionsFromSelectedSource() {\n  const copySelectElement = select(functionSelectors.copySelect);\n  if (!copySelectElement) return;\n  const sourceFileName = copySelectElement.value;\n  if (!sourceFileName) return;\n\n  if (functionRowModels.length > 0) {\n    const confirmReplace = window.confirm(\n      \"Replace current functions with those from the selected loco?\"\n    );\n    if (!confirmReplace) return;\n  }\n\n  try {\n    const sourceFunctions = await getFunctions(sourceFileName);\n    const nextModels = (Array.isArray(sourceFunctions) ? sourceFunctions : [])\n      .map((item) => ({\n        num: Number(item.num),\n        label: item.label ?? \"\",\n        lockable: Boolean(item.lockable),\n      }))\n      .filter((row) => Number.isFinite(row.num) && row.num >= 0 && row.num <= maxFunctionNumber);\n\n    functionRowModels = nextModels;\n    renderFunctionsList();\n    showToast?.(\"Functions copied\");\n  } catch (error) {\n    showToast?.(error?.message || \"Failed to copy functions\");\n  }\n}\n\n/* ------------------------------ DOM Events ---------------------------- */\n/**\n * Add a new function row at the next available number.\n *\n * @returns {void}\n */\nfunction addNewFunctionRow() {\n  const nextFreeFunctionNumber = findNextFreeFunctionNumber();\n  if (nextFreeFunctionNumber === null) {\n    showToast?.(\"All function numbers (0-28) are already used\");\n    return;\n  }\n  functionRowModels.push({\n    num: nextFreeFunctionNumber,\n    label: \"\",\n    lockable: false,\n  });\n  renderFunctionsList();\n}\n\n/**\n * Delete a function row represented by a card element.\n *\n * @param {HTMLElement} cardElement - The row card element.\n * @returns {void}\n */\nfunction deleteFunctionRowByCard(cardElement) {\n  const cardFunctionNumber = Number(cardElement.dataset.fnNum);\n  functionRowModels = functionRowModels.filter((row) => Number(row.num) !== cardFunctionNumber);\n  renderFunctionsList();\n}\n\n/**\n * Update the row's number, ensuring uniqueness across all rows.\n *\n * @param {HTMLElement} cardElement - The row card element.\n * @param {HTMLInputElement} numberInputElement - The number input element.\n * @returns {void}\n */\nfunction updateRowNumberWithUniqueness(cardElement, numberInputElement) {\n  const originalFunctionNumber = Number(cardElement.dataset.fnNum);\n  const rowIndex = functionRowModels.findIndex((row) => Number(row.num) === originalFunctionNumber);\n  if (rowIndex < 0) return;\n\n  const rowModel = functionRowModels[rowIndex];\n  const requestedNumber = Number(numberInputElement.value);\n\n  if (!Number.isFinite(requestedNumber)) {\n    numberInputElement.value = String(rowModel.num);\n    return;\n  }\n\n  const clampedRequested = clampNumber(0, requestedNumber, maxFunctionNumber);\n\n  // Temporarily free this row’s number to check uniqueness correctly.\n  const previousNumber = rowModel.num;\n  // @ts-expect-error temporary non-number sentinel\n  rowModel.num = \"__TEMP__\";\n  const uniqueNumber = findUniqueFunctionNumber(clampedRequested);\n  rowModel.num = previousNumber;\n\n  if (uniqueNumber === null) {\n    numberInputElement.value = String(previousNumber);\n    showToast?.(\"No free function numbers available (0-28)\");\n    return;\n  }\n\n  rowModel.num = uniqueNumber;\n  cardElement.dataset.fnNum = String(uniqueNumber);\n  numberInputElement.value = String(uniqueNumber);\n\n  renderFunctionsList(); // keep list sorted\n}\n\n/**\n * Update the label for a given row model.\n *\n * @param {HTMLElement} cardElement - The row card element.\n * @param {HTMLInputElement} textInputElement - The label input element.\n * @returns {void}\n */\nfunction updateRowLabel(cardElement, textInputElement) {\n  const cardFunctionNumber = Number(cardElement.dataset.fnNum);\n  const rowModel = functionRowModels.find((row) => Number(row.num) === cardFunctionNumber);\n  if (!rowModel) return;\n\n  rowModel.label = textInputElement.value.trim();\n}\n\n/**\n * Update the lockable flag for a given row model.\n *\n * @param {HTMLElement} cardElement - The row card element.\n * @param {HTMLInputElement} checkboxElement - The lockable checkbox element.\n * @returns {void}\n */\nfunction updateRowLockable(cardElement, checkboxElement) {\n  const cardFunctionNumber = Number(cardElement.dataset.fnNum);\n  const rowModel = functionRowModels.find((row) => Number(row.num) === cardFunctionNumber);\n  if (!rowModel) return;\n\n  rowModel.lockable = Boolean(checkboxElement.checked);\n}\n\n/**\n * Click handler for the functions list (delegated).\n *\n * @param {MouseEvent} event - The click event.\n * @returns {void}\n */\nfunction onFunctionsListClick(event) {\n  const cardElement = event.target.closest(\".fn-card\");\n  if (!cardElement) return;\n\n  // Delete button\n  if (event.target.closest(\".fn-delete-btn\")) {\n    deleteFunctionRowByCard(cardElement);\n  }\n}\n\n/**\n * Change handler for the functions list (delegated).\n *\n * @param {Event} event - The change event.\n * @returns {void}\n */\nfunction onFunctionsListChange(event) {\n  const cardElement = event.target.closest(\".fn-card\");\n  if (!cardElement) return;\n\n  if (event.target.classList.contains(\"fn-num-input\")) {\n    updateRowNumberWithUniqueness(cardElement, event.target);\n    return;\n  }\n  if (event.target.classList.contains(\"fn-label-input\")) {\n    updateRowLabel(cardElement, event.target);\n    return;\n  }\n  if (event.target.classList.contains(\"fn-lock-input\")) {\n    updateRowLockable(cardElement, event.target);\n  }\n}\n\n/**\n * Change handler for the \"copy from\" select.\n *\n * @returns {void}\n */\nfunction onCopySelectChange() {\n  copyFunctionsFromSelectedSource();\n}\n\n/**\n * Bind all Functions-tab DOM events exactly once.\n *\n * @returns {void}\n */\nfunction bindFunctionsDomEventsOnce() {\n  if (hasBoundDomEvents) return;\n  hasBoundDomEvents = true;\n\n  const functionsListElement = select(functionSelectors.list);\n  const addFunctionButton = select(functionSelectors.addButton);\n  const copySelectElement = select(functionSelectors.copySelect);\n\n  addFunctionButton?.addEventListener(\"click\", addNewFunctionRow);\n  functionsListElement?.addEventListener(\"click\", onFunctionsListClick);\n  functionsListElement?.addEventListener(\"change\", onFunctionsListChange);\n  copySelectElement?.addEventListener(\"change\", onCopySelectChange);\n}\n\n/* ------------------------------ Public API ---------------------------- */\n/**\n * Load and render the Functions tab for a roster record.\n *\n * @param {{ file?: string, data?: { fileName?: string } }} record - Roster record.\n * @returns {Promise<void>} Resolves after the tab is rendered.\n */\nexport async function loadFunctionsTab(record) {\n  bindFunctionsDomEventsOnce();\n\n  functionRowModels = [];\n  currentRosterFileName = record?.file || record?.data?.fileName || \"\";\n\n  // Populate the \"copy from\" select regardless of whether this loco has a file yet.\n  await populateCopySourceSelect();\n\n  // If brand-new (no file yet), show an empty, usable list and return.\n  if (!currentRosterFileName) {\n    renderFunctionsList();\n    return;\n  }\n\n  try {\n    const serverFunctions = await getFunctions(currentRosterFileName);\n    functionRowModels = (Array.isArray(serverFunctions) ? serverFunctions : [])\n      .map((serverFunction) => ({\n        num: Number(serverFunction.num),\n        label: serverFunction.label ?? \"\",\n        lockable: Boolean(serverFunction.lockable),\n      }))\n      .filter((row) => Number.isFinite(row.num) && row.num >= 0 && row.num <= maxFunctionNumber);\n\n    renderFunctionsList();\n  } catch (error) {\n    functionRowModels = [];\n    renderFunctionsList();\n    showToast?.(error?.message || \"Failed to load functions\");\n  }\n}\n\n/**\n * Persist the functions for the current roster record.\n *\n * @param {{ file?: string }} record - Roster record reference.\n * @returns {Promise<void>} Resolves after save completes.\n */\nexport async function saveFunctionsTab(record) {\n  const rosterFileName = record?.file || currentRosterFileName || \"\";\n  if (!rosterFileName) return;\n\n  sortFunctionRowsByNumber();\n  const payload = functionRowModels.map((row) => ({\n    num: Number(row.num),\n    label: row.label || \"\",\n    lockable: Boolean(row.lockable),\n  }));\n\n  await saveFunctions(rosterFileName, payload);\n}\n","// js/controllers/roster/dialog.js\n// Locomotive dialog controller (create + edit)\n// Now with image picking + upload to /api/roster/image\n\nimport { initTabs, resetDialogTabsAndScroll } from \"../../ui/tabs.js\";\nimport { query } from \"../../ui/dom.js\";\nimport { handleSave, handleDelete } from \"./data.js\";\nimport {\n  loadInfoTab,\n  resetInfoTab,\n  initInfoImagePicker,\n  onClickReadDcc,\n  onClickWriteDcc,\n  clearImageMemory,\n} from \"./dialog/infoTab.js\";\nimport { onClickReadDccChip } from \"./dialog/decoderSelect.js\";\nimport { loadFunctionsTab } from \"./dialog/functionsTab.js\";\nimport { DCC_RULES_REQUIRED, setupLiveDccValidation } from \"../../validation/dcc.js\";\n\n// Validation global\n/** @type {null | (() => void)} */\nlet detachAddressValidation = null;\n\n/* ========================================================================== */\n/* Selectors                                                                  */\n/* ========================================================================== */\n\n/**\n * Dialog query selectors used across tabs and actions.\n * (Exported name preserved for compatibility with existing imports.)\n */\nexport const LOCO_DIALOG_SELECTORS = {\n  dialog: \"#locoDialog\",\n  title: \"#locoDialogTitle\",\n\n  // Info tab fields\n  id: \"#locoId\",\n  dcc: \"#locoDccAddress\",\n  road: \"#locoRoadName\",\n  number: \"#locoNumber\",\n  model: \"#locoModel\",\n  owner: \"#locoOwner\",\n  file: \"#locoFile\",\n  imageUrl: \"#locoImageUrl\",\n  decoderSelect: \"#locoDecoderSelect\",\n\n  // Image pickers (present in your HTML)\n  imageEl: \"#modalRosterImage\",\n  dropZone: \"#modalImageDrop\",\n  fileInput: \"#modalImageInput\",\n\n  // Actions\n  save: \"#locoSave\",\n  cancel: \"#locoCancel\",\n  close: \"#locoClose\",\n  delete: \"#locoDelete\",\n  readDcc: \"#locoReadAddress\",\n  writeDcc: \"#locoWriteAddress\",\n  readDccChip: \"#locoDecoderRead\",\n};\n\n/* ========================================================================== */\n/* Dialog chrome                                                              */\n/* ========================================================================== */\n\n/**\n * Set the dialog title based on mode.\n *\n * @param {\"create\"|\"edit\"} mode - Dialog mode.\n * @returns {void}\n */\nfunction setDialogTitle(mode) {\n  const titleEl = query(LOCO_DIALOG_SELECTORS.title);\n  if (!titleEl) return;\n  titleEl.textContent = mode === \"create\" ? \"Add Locomotive\" : \"Edit Locomotive\";\n}\n\n/**\n * Make the ID input read-only in edit mode.\n *\n * @param {\"create\"|\"edit\"} mode - Dialog mode.\n * @returns {void}\n */\nfunction applyIdReadOnlyByMode(mode) {\n  const idInput = query(LOCO_DIALOG_SELECTORS.id);\n  if (!idInput) return;\n  idInput.toggleAttribute(\"readonly\", mode === \"edit\");\n}\n\n/**\n * Replace a button with a cloned node to reliably remove old listeners.\n *\n * @param {string} selector - CSS selector for the button.\n * @returns {HTMLElement|null} The fresh button element or null if not found.\n */\nfunction resetButton(selector) {\n  const button = query(selector);\n  if (!button) return null;\n  const clone = button.cloneNode(true);\n  button.replaceWith(clone);\n  return clone;\n}\n\n/* ========================================================================== */\n/* Open / Close                                                               */\n/* ========================================================================== */\n\n/**\n * Open a <dialog> element if not already open.\n *\n * @param {HTMLDialogElement} dialogElement - The dialog element.\n * @returns {void}\n */\nfunction showDialog(dialogElement) {\n  if (dialogElement && !dialogElement.open) dialogElement.showModal();\n}\n\n/**\n * Close the locomotive dialog and clear transient image state.\n *\n * @returns {void}\n */\nexport function closeDialog() {\n  const dialogElement = query(LOCO_DIALOG_SELECTORS.dialog);\n  try {\n    if (dialogElement?.open) dialogElement.close();\n  } catch (error) {\n    console.warn(error);\n  }\n\n  clearImageMemory();\n}\n\n/* ========================================================================== */\n/* Public API                                                                 */\n/* ========================================================================== */\n\n/**\n * Open the Locomotive dialog.\n *\n * @param {\"create\"|\"edit\"} mode - Dialog mode.\n * @param {object|null} record - Normalized roster record (or null for create).\n * @param {() => void} onSaved - Called after a successful save/delete.\n * @param {boolean} [prefill=false] - If true, keep existing image URL as-is.\n * @returns {Promise<void>} Resolves after the dialog is fully initialized.\n */\nexport async function openLocoDialog(mode, record, onSaved, prefill = false) {\n  const dialogElement = query(LOCO_DIALOG_SELECTORS.dialog);\n  if (!dialogElement) return;\n\n  // Title + ID policy\n  setDialogTitle(mode);\n  applyIdReadOnlyByMode(mode);\n\n  // Prefill or clear\n  if (record) {\n    loadInfoTab(record, prefill);\n  } else {\n    resetInfoTab();\n  }\n\n  // Tabs\n  initTabs(dialogElement);\n\n  // Wire the image pickers (click/drag/drop → preview)\n  initInfoImagePicker();\n\n  // Rebind actions idempotently\n  const saveBtn = resetButton(LOCO_DIALOG_SELECTORS.save);\n  const cancelBtn = resetButton(LOCO_DIALOG_SELECTORS.cancel);\n  const closeBtn = resetButton(LOCO_DIALOG_SELECTORS.close);\n  const deleteBtn = resetButton(LOCO_DIALOG_SELECTORS.delete);\n  const readBtn = resetButton(LOCO_DIALOG_SELECTORS.readDcc);\n  const writeBtn = resetButton(LOCO_DIALOG_SELECTORS.writeDcc);\n  const readDccChipBtn = resetButton(LOCO_DIALOG_SELECTORS.readDccChip);\n\n  // Wire buttons\n  saveBtn?.addEventListener(\"click\", () => handleSave(onSaved));\n  const closeHandler = () => closeDialog();\n  cancelBtn?.addEventListener(\"click\", closeHandler);\n  closeBtn?.addEventListener(\"click\", closeHandler);\n  deleteBtn?.addEventListener(\"click\", () => handleDelete(onSaved));\n  readBtn?.addEventListener(\"click\", onClickReadDcc);\n  writeBtn?.addEventListener(\"click\", onClickWriteDcc);\n  readDccChipBtn?.addEventListener(\"click\", () =>\n    onClickReadDccChip(query(LOCO_DIALOG_SELECTORS.decoderSelect))\n  );\n\n  // Visibility of buttons on load\n  if (mode === \"edit\") {\n    deleteBtn.hidden = false;\n  } else {\n    deleteBtn.hidden = true;\n  }\n\n  // Live validation\n  const addressInput = query(LOCO_DIALOG_SELECTORS.dcc);\n  if (detachAddressValidation) detachAddressValidation();\n  detachAddressValidation = setupLiveDccValidation({\n    input: addressInput,\n    saveButton: query(LOCO_DIALOG_SELECTORS.save),\n    writeDccButton: query(LOCO_DIALOG_SELECTORS.writeDcc),\n    rules: DCC_RULES_REQUIRED,\n    errorId: \"rosterSystemNameError\",\n    disableSaveWhenInvalid: true,\n  });\n\n  // Load functions tab\n  try {\n    await loadFunctionsTab(record);\n  } catch (error) {\n    console.warn(error);\n  }\n\n  // Open\n  showDialog(dialogElement);\n\n  // Reset tab and scroll\n  resetDialogTabsAndScroll(dialogElement);\n}\n","// js/controllers/roster/data.js\n// Fetch & normalize roster entries for the Roster panel + create/update/delete.\n\n/* --------------------------------- Imports -------------------------------- */\n\n// Parent-level modules\nimport {\n  getRoster,\n  saveRosterEntry,\n  deleteRoster,\n  resolveFileNameById,\n  uploadRosterImage,\n  uploadRosterXml,\n  saveRosterDecoder,\n} from \"../../services/jmri.js\";\nimport { DCC_RULES_REQUIRED, getDccAddressError } from \"../../validation/dcc.js\";\nimport { toSafeFileBase } from \"../../validation/form.js\";\nimport { busyWhile } from \"../../ui/busy.js\";\nimport { showToast } from \"../../ui/toast.js\";\nimport { query, setInputValue, getInputValue } from \"../../ui/dom.js\";\n// Sibling modules\nimport { LOCO_DIALOG_SELECTORS, closeDialog } from \"./dialog.js\";\nimport {\n  getInfoTabSnapshot,\n  getPickedImageFile,\n  decideImagePersistence,\n  getExistingImageSrc,\n} from \"./dialog/infoTab.js\";\nimport { getChosenDecoderFromSelect } from \"./dialog/decoderSelect.js\";\nimport { saveFunctionsTab } from \"./dialog/functionsTab.js\";\nimport { refreshRoster } from \"./index.js\";\n\n/* --------------------------------- State ---------------------------------- */\n\nlet xmlPickerInputElement = null;\n\n/* ----------------------------- Data Fetching ------------------------------ */\n/**\n * Load roster from the servlet.\n * GET /api/roster → [{ id, fileName, address, road, number, owner, model }]\n *\n * @returns {Promise<Array<ReturnType<typeof toRosterRecord>>>} Normalized roster records.\n */\nexport async function fetchRoster() {\n  const rawRoster = await getRoster({ fresh: true });\n  // const rawRoster = await getJSON(\"/api/roster\");\n  return Array.isArray(rawRoster) ? rawRoster.map(toRosterRecord).filter(Boolean) : [];\n}\n\n/* ---------------------------- Normalization -------------------------------- */\n/**\n * Map a raw roster entry into a UI-friendly record (keeps original in `data`).\n * - title: id\n * - address: DCC address (string)\n * - lines: road/number/model/owner (for subs)\n * - imageUrl: /api/roster/icon?id=<id>\n *\n * @param {object} entry - Raw roster entry from the backend.\n * @returns {null|{\n *   title:string, address:string, road:string, number:string, model:string, owner:string,\n *   imageUrl:string, id:string, file:string, data:object\n * }} Normalized record or null on invalid input.\n */\nexport function toRosterRecord(entry) {\n  if (!entry || typeof entry !== \"object\") return null;\n\n  const id = toSafeString(entry.id);\n  const fileName = toSafeString(entry.fileName);\n  const address = toSafeString(entry.address);\n  const road = toSafeString(entry.road);\n  const number = toSafeString(entry.number);\n  const model = toSafeString(entry.model);\n  const owner = toSafeString(entry.owner);\n\n  // Simple icon URL; server handles placeholder/SVG fallback.\n  const imageUrl = id ? `/api/roster/icon?id=${encodeURIComponent(id)}` : \"\";\n\n  return {\n    // Display\n    title: id,\n    address,\n    road,\n    number,\n    model,\n    owner,\n    imageUrl,\n\n    // ids/files we’ll need later\n    id,\n    file: fileName,\n\n    // keep original\n    data: entry,\n  };\n}\n\n/**\n * Convert a possibly-null value to a safe string.\n * Note: preserves \"undefined\" for undefined values (keeps prior behavior).\n *\n * @param {unknown} value - Any value.\n * @returns {string} Safe string.\n */\nfunction toSafeString(value) {\n  return value === null ? \"\" : String(value);\n}\n\n/* ------------------------------ Save / Delete ------------------------------ */\n/**\n * Save handler: validates, persists roster entry, resolves file name, uploads image,\n * saves decoder and functions, then closes the dialog.\n *\n * @param {() => void} [onSaved] - Optional callback invoked after a successful save.\n * @returns {Promise<void>} Resolves when the save flow completes.\n */\nexport async function handleSave(onSaved) {\n  const formValues = getInfoTabSnapshot();\n\n  if (!formValues.id) {\n    showToast(\"ID is required\");\n    return;\n  }\n\n  const dccAddressError = getDccAddressError(formValues.address, DCC_RULES_REQUIRED);\n  if (dccAddressError) {\n    showToast?.(dccAddressError);\n    return;\n  }\n\n  try {\n    await busyWhile(async () => {\n      // Maintain the same variable lifecycle; clearer names only.\n      let resolvedFileName = formValues.file;\n\n      // Decide image persistence (behavior unchanged)\n      const { fileToUpload, imageField } = await decideImagePersistence({\n        pickedFile: getPickedImageFile(),\n        existingSrc: getExistingImageSrc(),\n        rosterId: formValues.id,\n      });\n\n      // Build initial filename (unchanged logic)\n      const proposedFileName = formValues.file || `${toSafeFileBase(formValues.id)}.xml`;\n\n      // Build payload exactly as before, optionally including image field\n      const savePayload = {\n        ...formValues,\n        file: proposedFileName,\n        ...(typeof imageField !== \"undefined\" ? { image: imageField } : {}),\n      };\n\n      // 1) Create/update the roster entry with basic fields\n      await saveRosterEntry(savePayload.file, savePayload);\n\n      // 2) Resolve canonical file name (first-save case)\n      resolvedFileName = await resolveFileNameById(formValues.file);\n      if (resolvedFileName) {\n        setInputValue(LOCO_DIALOG_SELECTORS.file, resolvedFileName);\n      }\n\n      // 3) Upload image if one is present\n      if (fileToUpload) {\n        await uploadRosterImage(savePayload.id, fileToUpload);\n      }\n\n      // 4) Save loco decoder\n      const decoderSelect = query(LOCO_DIALOG_SELECTORS.decoderSelect);\n      const chosenDecoder = getChosenDecoderFromSelect(decoderSelect);\n      if (chosenDecoder) {\n        await saveRosterDecoder(savePayload.id, chosenDecoder);\n      }\n\n      // 5) Save functions\n      await saveFunctionsTab(savePayload);\n    }, \"Saving…\");\n\n    closeDialog();\n    showToast(\"Saved\");\n    onSaved?.();\n  } catch (error) {\n    showToast(error?.message || \"Save failed\");\n  }\n}\n\n/**\n * Delete handler: deletes by file name, then closes dialog and toasts.\n *\n * @param {() => void} [onSaved] - Optional callback invoked after deletion.\n * @returns {Promise<void>} Resolves when deletion completes.\n */\nexport async function handleDelete(onSaved) {\n  const fileNameToDelete = getInputValue(LOCO_DIALOG_SELECTORS.file);\n\n  if (!fileNameToDelete) {\n    showToast(\"Missing file to delete\");\n    return;\n  }\n\n  try {\n    await busyWhile(async () => {\n      await deleteRoster(fileNameToDelete);\n    }, \"Deleting…\");\n\n    closeDialog();\n    showToast(\"Deleted\");\n    onSaved?.();\n  } catch (error) {\n    showToast(error?.message || \"Delete failed\");\n  }\n}\n\n/* ------------------------------ Upload XML ------------------------------ */\n/**\n * Ensure a hidden `<input type=\"file\">` exists for XML uploads.\n *\n * @returns {HTMLInputElement} The (possibly newly created) file input element.\n */\nfunction ensureXmlPicker() {\n  if (xmlPickerInputElement) return xmlPickerInputElement;\n\n  const input = document.createElement(\"input\");\n  input.type = \"file\";\n  input.accept = \".xml,application/xml,text/xml\";\n  input.hidden = true;\n  document.body.appendChild(input);\n\n  input.addEventListener(\"change\", async () => {\n    const xmlFile = input.files?.[0];\n    input.value = \"\";\n\n    if (!xmlFile) return;\n\n    const isXml =\n      xmlFile.type === \"application/xml\" ||\n      xmlFile.type === \"text/xml\" ||\n      /\\.xml$/i.test(xmlFile.name);\n    if (!isXml) {\n      showToast(\"Please select an XML file\");\n      return;\n    }\n\n    // --- build a safe filename (sanitize base, keep .xml) ---\n    const originalName = xmlFile.name || \"unnamed.xml\";\n    const base = originalName.replace(/\\.[^.]+$/g, \"\"); // strip extension\n    const safeBase = toSafeFileBase(base);\n    const safeName = `${safeBase}.xml`;\n\n    try {\n      await busyWhile(async () => {\n        await uploadRosterXml(xmlFile, safeName);\n        showToast(\"XML uploaded\");\n        await fetchRoster();\n        refreshRoster();\n      }, \"Uploading XML…\");\n    } catch (error) {\n      showToast(error?.message || \"Upload failed\");\n    }\n  });\n\n  xmlPickerInputElement = input;\n  return xmlPickerInputElement;\n}\n\n/**\n * Start the XML upload flow by opening the file picker.\n *\n * @returns {void}\n */\nexport function startXmlUploadFlow() {\n  const picker = ensureXmlPicker();\n  picker.click();\n}\n","// js/controllers/roster/view.js\n// Roster card component (no Delete button; Edit only).\n\nimport { escapeHtml } from \"../../ui/dom.js\";\n\n/**\n * Create a single roster card element.\n *\n * @param {object} rosterRecord - Normalised roster record.\n *   Expected shape (subset):\n *     {\n *       id: string,\n *       title: string,\n *       address: string,\n *       road: string,\n *       number: string,\n *       model: string,\n *       owner: string,\n *       imageUrl: string\n *     }\n * @param {{ onEdit?: (record: object) => void }} [handlers={}] - Optional callbacks.\n * @returns {HTMLElement} The constructed card element.\n */\nexport function createRosterCard(rosterRecord, handlers = {}) {\n  const cardElement = document.createElement(\"article\");\n  cardElement.className = \"card\";\n  cardElement.dataset.rosterId = rosterRecord.id;\n\n  const titleText = rosterRecord.title || \"(unnamed)\";\n\n  // Build the subtitle lines (only include truthy values)\n  const subtitleLines = filterTruthy([\n    rosterRecord.address && `DCC ${rosterRecord.address}`,\n    formatRoadAndNumber(rosterRecord.road, rosterRecord.number),\n    rosterRecord.model,\n    rosterRecord.owner && `Owner: ${rosterRecord.owner}`,\n  ]);\n\n  // Static structure: image area + body (title, subs)\n  cardElement.innerHTML = `\n    <div class=\"card-img\" aria-hidden=\"true\">\n      ${buildImageMarkup(rosterRecord.imageUrl)}\n    </div>\n    <div class=\"card-body\">\n      <div class=\"card-title\">${escapeHtml(titleText)}</div>\n      ${subtitleLines.map((line) => `<div class=\"card-sub\">${escapeHtml(line)}</div>`).join(\"\")}\n    </div>\n  `;\n\n  // Card is clickable; also provide explicit Edit button if present.\n  const openEditor = () => handlers.onEdit?.(rosterRecord);\n\n  // Click anywhere on the card to edit\n  cardElement.addEventListener(\"click\", openEditor);\n\n  // Prevent card click from firing when Edit button is pressed\n  cardElement.querySelector('[data-act=\"edit\"]')?.addEventListener(\"click\", (event) => {\n    event.stopPropagation();\n    openEditor();\n  });\n\n  return cardElement;\n}\n\n/* ========================================================================== */\n/* Helpers                                                                    */\n/* ========================================================================== */\n\n/**\n * Build image markup for the card.\n * - If a URL is provided, render an <img>.\n * - Otherwise, render a semantic placeholder element.\n *\n * @param {string} src - Image source URL.\n * @returns {string} HTML string for the image region.\n */\nfunction buildImageMarkup(src) {\n  const cleaned = (src || \"\").trim();\n  if (!cleaned) {\n    return \"<span class=\\\"card-img-placeholder\\\" aria-hidden=\\\"true\\\"></span>\";\n  }\n  return `<img class=\"card-img-media\" src=\"${escapeAttribute(cleaned)}&v=${Date.now()}\" alt=\"\" loading=\"lazy\" decoding=\"async\" data-roster-img=\"\">`;\n}\n\n/**\n * Format a combined \"road number\" line.\n * Examples:\n *   (\"BNSF\", \"1234\") -> \"BNSF 1234\"\n *   (\"BNSF\", \"\")     -> \"BNSF\"\n *   (\"\", \"1234\")     -> \"1234\"\n *   (\"\", \"\")         -> \"\"\n *\n * @param {string} road - Road name.\n * @param {string} number - Loco number.\n * @returns {string} Formatted line or empty string.\n */\nfunction formatRoadAndNumber(road, number) {\n  const roadText = (road || \"\").trim();\n  const numberText = (number || \"\").trim();\n  if (!roadText && !numberText) return \"\";\n  if (roadText && numberText) return `${roadText} ${numberText}`;\n  return roadText || numberText;\n}\n\n/**\n * Remove falsy values from an array.\n *\n * @template T\n * @param {T[]} array - Array possibly containing falsy entries.\n * @returns {T[]} A new array with only truthy values.\n */\nfunction filterTruthy(array) {\n  return (array || []).filter(Boolean);\n}\n\n/**\n * Escape double-quotes for safe attribute interpolation.\n * (Use `escapeHtml` for text nodes; this is only for attributes.)\n *\n * @param {string} value - Attribute value.\n * @returns {string} Escaped value.\n */\nfunction escapeAttribute(value) {\n  return String(value).replace(/\"/g, \"&quot;\");\n}\n","// js/controllers/roster/selectors.js\n// Centralized DOM selectors and lookups for the Roster panel.\n\n/**\n * CSS selectors for key Roster UI elements.\n * - panel: the entire Roster panel section\n * - list:  the card list container inside the panel\n * - addButton: the “Add Loco” button in the top bar\n */\nexport const ROSTER_SELECTORS = Object.freeze({\n  panel: \"#panelRoster\",\n  list: \"#rosterList\",\n  addButton: \"#addBtn\",\n});\n\n/**\n * Query and return the key elements for the Roster panel.\n *\n * @param {ParentNode} [root=document] - Root to query within.\n * @returns {{\n *   panelElement: HTMLElement|null,\n *   listElement: HTMLElement|null,\n *   addButton: HTMLButtonElement|null\n * }}\n */\nexport function queryRosterElements(root = document) {\n  return {\n    panelElement: root.querySelector(ROSTER_SELECTORS.panel),\n    listElement: root.querySelector(ROSTER_SELECTORS.list),\n    addButton: root.querySelector(ROSTER_SELECTORS.addButton),\n  };\n}\n","import { escapeHtml } from \"../../../ui/dom.js\";\nimport { showToast } from \"../../../ui/toast.js\";\nimport { fetchRoster } from \"../data.js\";\nimport { openLocoDialog } from \"../dialog.js\";\nimport { refreshRoster } from \"../index.js\";\n\n/**\n * Build a unique ID suggestion based on a base ID and a set of existing IDs.\n * If the base already exists, appends/increments a numeric suffix.\n *\n * @param {string} locoId - The starting ID value to base the suggestion on.\n * @param {Set<string>} existingIdSet - A set of existing IDs (case-insensitive).\n * @returns {string} A unique ID suggestion, or an empty string if no base provided.\n */\nfunction buildUniqueIdSuggestion(locoId, existingIdSet) {\n  const base = String(locoId || \"\").trim();\n  if (!base) return \"\";\n\n  const exists = (id) => existingIdSet.has(String(id).toLowerCase());\n  if (!exists(base)) return base;\n\n  const matchedId = base.match(/^(.*?)(\\d+)$/);\n  const stem = matchedId ? matchedId[1] : `${base}-`;\n  let numberPostfix = matchedId ? parseInt(matchedId[2], 10) + 1 : 2;\n  let candidate = `${stem}${numberPostfix}`;\n\n  while (exists(candidate)) {\n    numberPostfix += 1;\n    candidate = `${stem}${numberPostfix}`;\n  }\n\n  return candidate;\n}\n\n/**\n * Create a Set of existing IDs (lowercased) from a normalized roster.\n *\n * @param {Array<object>} records - Roster records that may contain an `id` field.\n * @returns {Set<string>} A set of lowercased IDs.\n */\nfunction collectExistingIdSet(records) {\n  const recordSet = new Set();\n  for (const record of records || []) {\n    if (record?.id) {\n      recordSet.add(String(record.id).toLowerCase());\n    }\n  }\n  return recordSet;\n}\n\n/**\n * Build the icon URL for a given roster entry ID.\n *\n * @param {string} id - The roster entry ID.\n * @returns {string} A cache-busted icon URL.\n */\nfunction buildIconUrl(id) {\n  return `/api/roster/icon?id=${encodeURIComponent(id)}&v=${Date.now()}`;\n}\n\n/**\n * Open the \"create\" loco dialog prefilled with data from a source record (except ID).\n *\n * @param {object} source - The source roster record to copy from.\n * @param {Array<object>} allRecords - All roster records (for unique ID suggestion).\n * @returns {void}\n */\nfunction openCopyFromRecord(source, allRecords) {\n  if (!source) return;\n\n  const existingIds = collectExistingIdSet(allRecords);\n  const suggestedId = buildUniqueIdSuggestion(source.id, existingIds);\n\n  const prefill = {\n    id: suggestedId,\n    address: source.address || \"\",\n    road: source.road || \"\",\n    number: source.number || \"\",\n    model: source.model || \"\",\n    owner: source.owner || \"\",\n    file: \"\",\n    imageUrl: source.imageUrl || \"\",\n  };\n\n  openLocoDialog(\"create\", prefill, () => refreshRoster(), true);\n}\n\n/* ---------- Popover rendering & behavior ---------- */\n\nconst copyState = {\n  root: null,\n  anchor: null,\n  records: [],\n  filtered: [],\n};\n\n/**\n * Ensure the popover DOM structure exists and wire basic interactions.\n *\n * @returns {{ entryItem: HTMLElement, copyPopup: HTMLElement, search: HTMLInputElement, listContainer: HTMLElement, closeButton: HTMLButtonElement }} References to created DOM elements.\n */\nfunction ensureCopyPopoverElements() {\n  if (copyState.root) return copyState.root;\n\n  const entryItem = document.createElement(\"div\");\n  entryItem.className = \"copy-entryItem\";\n  entryItem.hidden = true;\n\n  const copyPopup = document.createElement(\"div\");\n  copyPopup.className = \"copy-popover\";\n  copyPopup.role = \"tabpanel\";\n  copyPopup.hidden = true;\n  copyPopup.innerHTML = `\n    <div class=\"copy-head\">\n      <input class=\"copy-search\" type=\"search\" placeholder=\"Search by ID, road, number, model, owner\" aria-label=\"Search locos\">\n      <button class=\"copy-close\" aria-label=\"Close\">\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M6 6l12 12M18 6L6 18\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>\n      </button>\n    </div>\n    <div class=\"copy-list\" role=\"listbox\" aria-label=\"Locos\"></div>\n  `;\n\n  document.body.appendChild(entryItem);\n  document.body.appendChild(copyPopup);\n\n  const search = copyPopup.querySelector(\".copy-search\");\n  const listContainer = copyPopup.querySelector(\".copy-list\");\n  const closeButton = copyPopup.querySelector(\".copy-close\");\n\n  copyState.root = { entryItem, copyPopup, search, listContainer, closeButton };\n\n  // Close behaviors\n  const closePopover = () => {\n    entryItem.hidden = true;\n    copyPopup.hidden = true;\n    copyPopup.removeAttribute(\"style\");\n    copyState.anchor = null;\n  };\n\n  entryItem.addEventListener(\"click\", closePopover);\n  closeButton?.addEventListener(\"click\", closePopover);\n\n  // Search behavior\n  search.addEventListener(\"input\", () => {\n    renderCopyListItems(filterRosterRecordsBySearchTerm(copyState.records, search.value));\n  });\n\n  return copyState.root;\n}\n\n/**\n * Filter roster records by a case-insensitive search term, limiting to 200 results.\n *\n * @param {Array<object>} records - All roster records.\n * @param {string} searchValue - Free-text search input.\n * @returns {Array<object>} Filtered records up to 200 items.\n */\nfunction filterRosterRecordsBySearchTerm(records, searchValue) {\n  const term = String(searchValue || \"\")\n    .trim()\n    .toLowerCase();\n  if (!term) return (records || []).slice(0, 200);\n\n  return (records || [])\n    .filter((record) => {\n      return [record.id, record.road, record.number, record.model, record.owner].some((value) =>\n        (value || \"\").toLowerCase().includes(term)\n      );\n    })\n    .slice(0, 200);\n}\n\n/**\n * Render the filtered list of roster records into the popover list container.\n *\n * @param {Array<object>} records - Records to render.\n * @returns {void}\n */\nfunction renderCopyListItems(records) {\n  const { listContainer } = copyState.root;\n  copyState.filtered = records;\n\n  listContainer.innerHTML = \"\";\n  if (!records.length) {\n    listContainer.innerHTML =\n      '<div class=\"copy-item copy-item-no-results\" aria-disabled=\"true\">No matches</div>';\n    return;\n  }\n\n  records.forEach((rosterEntry) => {\n    const listItem = document.createElement(\"div\");\n    listItem.className = \"copy-item\";\n    listItem.setAttribute(\"role\", \"option\");\n\n    listItem.innerHTML = `\n      <div class=\"copy-thumb\"><img alt=\"\" src=\"${buildIconUrl(rosterEntry.id)}\"></div>\n      <div class=\"copy-main\">\n        <div class=\"copy-title\">${escapeHtml(rosterEntry.id)}</div>\n        <div class=\"copy-sub\">${escapeHtml(\n          [rosterEntry.road, rosterEntry.number, rosterEntry.model, rosterEntry.owner]\n            .filter(Boolean)\n            .join(\" | \")\n        )}</div>\n      </div>\n    `;\n\n    listItem.addEventListener(\"click\", (event) => {\n      if (event.target.closest(\".copy-choose\") || event.currentTarget === listItem) {\n        handleRecordChosen(rosterEntry);\n      }\n    });\n\n    listItem.addEventListener(\"mouseenter\", () => {\n      listItem.focus({ preventScroll: true });\n    });\n\n    listContainer.appendChild(listItem);\n  });\n}\n\n/**\n * Handle selection of a roster record from the popover.\n *\n * @param {object} record - The chosen roster record.\n * @returns {void}\n */\nfunction handleRecordChosen(record) {\n  const { entryItem, copyPopup } = copyState.root;\n  entryItem.hidden = true;\n  copyPopup.hidden = true;\n  copyPopup.removeAttribute(\"style\");\n  copyState.anchor = null;\n  openCopyFromRecord(record, copyState.records);\n}\n\n/**\n * Position the copy popover relative to its anchor.\n *\n * @param {HTMLElement} anchor - The anchor element that triggers the popover.\n * @param {HTMLElement} copyPopup - The popover element to position.\n * @returns {void}\n */\nfunction positionCopyPopover(anchor, copyPopup) {\n  const rect = anchor.getBoundingClientRect();\n  const top = rect.bottom + 8;\n\n  copyPopup.style.top = `${top}px`;\n  copyPopup.style.right = \"10px\";\n}\n\n/**\n * Open the \"Copy From\" selector popover. Fetches roster, renders list, and focuses search.\n *\n * @param {HTMLElement} anchorEl - Optional anchor element. Defaults to #addLocoMore.\n * @returns {Promise<void>} Resolves after the popover is opened or an error toast is shown.\n */\nexport async function openCopySelector(anchorEl) {\n  const uiElements = ensureCopyPopoverElements();\n  copyState.anchor = anchorEl || document.getElementById(\"addLocoMore\");\n\n  try {\n    const records = await fetchRoster();\n    copyState.records = records || [];\n  } catch (error) {\n    showToast(error?.message || \"Failed to load roster\");\n    return;\n  }\n\n  uiElements.entryItem.hidden = false;\n  uiElements.copyPopup.hidden = false;\n  renderCopyListItems(filterRosterRecordsBySearchTerm(copyState.records, \"\"));\n  positionCopyPopover(copyState.anchor, uiElements.copyPopup);\n  uiElements.search.value = \"\";\n  uiElements.search.focus({ preventScroll: true });\n}\n","// js/controllers/roster/index.js\n// Controller for the Roster panel: fetch → render → wire UI.\n\n/* --------------------------------- Imports -------------------------------- */\n\n// Parent imports\nimport { busyWhile } from \"../../ui/busy.js\";\nimport { showToast } from \"../../ui/toast.js\";\n// Sibling imports\nimport { fetchRoster, startXmlUploadFlow } from \"./data.js\";\nimport { createRosterCard } from \"./view.js\";\nimport { queryRosterElements } from \"./selectors.js\";\nimport { openLocoDialog } from \"./dialog.js\";\nimport { openCopySelector } from \"./dialog/copySelector.js\";\n\n/* --------------------------------- State ---------------------------------- */\n\n/** Panel identity used by the shell’s panel switch events. */\nconst panelName = \"roster\";\n\n/** User-facing busy message while the roster loads. */\nconst loadingMessage = \"Loading roster…\";\n\n/** Module-scoped state for this controller. */\nconst controllerState = {\n  initialized: false,\n  items: [],\n};\n\n/* ============================================================================\n * DOM helpers\n * ========================================================================== */\n\n/**\n * Return the roster list container element (already present in index.html).\n *\n * @returns {HTMLElement|null} The list container, or null if not found.\n */\nfunction getListContainer() {\n  const { listElement } = queryRosterElements();\n  return listElement || null;\n}\n\n/* ============================================================================\n * Rendering\n * ========================================================================== */\n\n/**\n * Render roster cards into the list container.\n * Cards are clickable and have an explicit “Edit” button; both open the dialog.\n *\n * @param {Array<object>} rosterList - Normalized roster records to render.\n * @returns {void}\n */\nfunction renderRosterList(rosterList) {\n  const container = getListContainer();\n  if (!container) return;\n\n  container.innerHTML = \"\";\n\n  (rosterList || []).forEach((record) => {\n    const card = createRosterCard(record, {\n      onEdit: () => openLocoDialog(\"edit\", record, () => refreshRoster()),\n    });\n    container.appendChild(card);\n  });\n\n  // Simple empty state\n  if (!rosterList || rosterList.length === 0) {\n    container.innerHTML = `\n      <div class=\"empty\">\n        <div class=\"empty-title\">No locomotives yet</div>\n        <div class=\"empty-subtitle\">Add a locomotive to get started.</div>\n      </div>\n    `;\n  }\n}\n\n/* ============================================================================\n * Data loading\n * ========================================================================== */\n\n/**\n * Fetch latest roster and re-render; caches into controller state.\n *\n * @returns {Promise<void>} Resolves when data is loaded and rendered.\n */\nasync function loadAndRenderRoster() {\n  const list = await fetchRoster();\n  controllerState.items = list;\n  renderRosterList(list);\n}\n\n/* ============================================================================\n * Public API\n * ========================================================================== */\n\n/**\n * Lazy render: first time this panel is shown (or when directly visible on load).\n *\n * @returns {Promise<void>} Resolves after initial render (or no-op if already initialized).\n */\nexport async function renderRosterOnce() {\n  if (controllerState.initialized) return;\n  controllerState.initialized = true;\n\n  // Show empty grid immediately; fill with data when ready.\n  renderRosterList([]);\n\n  try {\n    await busyWhile(loadAndRenderRoster, loadingMessage);\n  } catch {\n    // Leave empty state; optional toast if desired.\n  }\n}\n\n/**\n * Explicit refresh hook (useful after dialog save).\n *\n * @returns {Promise<void>} Resolves when the roster has been refreshed.\n */\nexport async function refreshRoster() {\n  try {\n    await busyWhile(loadAndRenderRoster, \"Refreshing…\");\n  } catch {\n    showToast(\"Refresh failed\");\n  }\n}\n\n/* ============================================================================\n * Wiring\n * ========================================================================== */\n\n/**\n * Handle panel switch events: initialise on first show.\n *\n * @param {CustomEvent<{name:string}>} event - Panel change event.\n * @returns {void}\n */\nfunction handlePanelChanged(event) {\n  if (event?.detail?.name === panelName) {\n    renderRosterOnce();\n  }\n}\n\n/**\n * Wire the “Add Loco” split menu and actions.\n *\n * @returns {void}\n */\nfunction initSplitMenu() {\n  const { addButton } = queryRosterElements();\n  const toggle = document.getElementById(\"addLocoMore\");\n  const menu = document.getElementById(\"addLocoMenu\");\n\n  if (!toggle || !menu || !addButton) return;\n\n  addButton.addEventListener(\"click\", () => {\n    openLocoDialog(\"create\", null, () => refreshRoster(), false);\n  });\n\n  const openMenu = () => {\n    menu.hidden = false;\n    toggle.setAttribute(\"aria-expanded\", \"true\");\n    document.addEventListener(\"click\", onDocClick, { capture: true });\n  };\n\n  const closeMenu = () => {\n    menu.hidden = true;\n    toggle.setAttribute(\"aria-expanded\", \"false\");\n    document.removeEventListener(\"click\", onDocClick, { capture: true });\n  };\n\n  const onDocClick = (event) => {\n    if (menu.contains(event.target) || toggle.contains(event.target)) return;\n    closeMenu();\n  };\n\n  toggle.addEventListener(\"click\", (event) => {\n    event.stopPropagation();\n    menu.hidden ? openMenu() : closeMenu();\n  });\n\n  menu.addEventListener(\"click\", (event) => {\n    const btn = event.target.closest(\".menu-item\");\n    if (!btn) return;\n    const action = btn.dataset.action;\n    closeMenu();\n\n    if (action === \"manual\") {\n      openLocoDialog(\"create\", null, () => refreshRoster(), false);\n    }\n    if (action === \"copy\") {\n      openCopySelector(document.getElementById(\"addLocoMore\"));\n    }\n    if (action === \"upload\") {\n      startXmlUploadFlow();\n    }\n  });\n}\n\n/**\n * Init entry point for the Roster panel.\n * - Subscribes to panel changes\n * - Wires “Add Loco”\n * - If Roster is already visible, renders immediately\n *\n * @returns {void}\n */\nexport function initRoster() {\n  document.addEventListener(\"panel:changed\", handlePanelChanged);\n  initSplitMenu();\n\n  const { panelElement } = queryRosterElements();\n  if (panelElement && !panelElement.hasAttribute(\"hidden\")) {\n    renderRosterOnce();\n  }\n}\n","// js/controllers/settings/selectors.js\n// Centralized DOM selectors for the Settings panel.\n//\n// Usage:\n//   import { SETTINGS_SELECTORS, querySettingsElements } from \"./selectors.js\";\n//   const { panelElement } = querySettingsElements();\n\n/** Readable selector map for Settings-related elements. */\nexport const SETTINGS_SELECTORS = Object.freeze({\n  panel: \"#panelSettings\",\n  connectionsSelect: \"#jmriConnectionSelect\",\n});\n\n/**\n * Query and return the key Settings elements.\n *\n * @param {ParentNode} [root=document] - Optional root node to scope the queries.\n * @returns {{\n *   panelElement: HTMLElement|null,\n *   connectionsElement: HTMLSelectElement|null\n * }}\n */\nexport function querySettingsElements(root = document) {\n  const find = (selector) => /** @type {HTMLElement|null} */ (root.querySelector(selector));\n\n  return {\n    panelElement: find(SETTINGS_SELECTORS.panel),\n    connectionsElement: /** @type {HTMLSelectElement|null} */ (find(SETTINGS_SELECTORS.connectionsSelect)),\n  };\n}\n","// js/controllers/settings/index.js\n// Controller for the Settings panel.\n// - Initializes on first view\n// - Loads data from JMRI\n\nimport { populateActiveConnection, activeConnection } from \"../../services/cachedValues.js\";\nimport { getActiveConnection, setActiveConnection } from \"../../services/jmri.js\";\nimport { query } from \"../../ui/dom.js\";\nimport { busyWhile } from \"../../ui/busy.js\";\nimport { SETTINGS_SELECTORS as settingsSelectors } from \"./selectors.js\";\n\n/** Constants */\nconst panelName = \"settings\";\nconst loadingMessage = \"Loading settings…\";\n\n/**\n * Initialize the Settings controller:\n * - Subscribes to panel changes\n * - Wires up elements\n * - Checks setting status each time the panel opens\n *\n * @returns {Promise<void>} Resolves after listeners are attached.\n */\nexport async function initSettings() {\n  document.addEventListener(\"panel:changed\", handlePanelChanged);\n\n  const connectionsSelectElement = query(settingsSelectors.connectionsSelect);\n  if (connectionsSelectElement) {\n    connectionsSelectElement.addEventListener(\"change\", updateActiveConnection);\n  }\n}\n\n/**\n * Handle panel switch events; lazily initializes this panel on first show.\n *\n * @param {CustomEvent<{name:string}>} event - panel:changed event.\n * @returns {Promise<void>} Resolves after attempts to populate the select.\n */\nasync function handlePanelChanged(event) {\n  if (event?.detail?.name === panelName) {\n    try {\n      await busyWhile(async () => {\n        await populateActiveConnectionSelect();\n      }, loadingMessage);\n    } catch {\n      // Intentionally silent: keep the empty state if loading fails.\n    }\n  }\n}\n\n/**\n * Populate the connections <select> with available JMRI connections and\n * mark the active one as selected.\n *\n * @returns {Promise<void>} Resolves when the select is populated.\n */\nasync function populateActiveConnectionSelect() {\n  const activeConnectionObject = await getActiveConnection();\n  populateActiveConnection(activeConnectionObject);\n\n  const connectionSelect = query(settingsSelectors.connectionsSelect);\n  if (!connectionSelect) return;\n\n  connectionSelect.innerHTML = \"\";\n  for (const connection of activeConnectionObject) {\n    const option = document.createElement(\"option\");\n    option.value = connection.systemPrefix;\n    option.textContent = connection.userName;\n\n    if (connection.systemPrefix === activeConnection?.systemPrefix) {\n      option.selected = true;\n    }\n\n    connectionSelect.appendChild(option);\n  }\n}\n\n/**\n * Update the active connection when the user changes the select.\n *\n * @param {Event} event - Change event from the connections <select>.\n * @returns {Promise<void>} Resolves after the active connection is updated.\n */\nasync function updateActiveConnection(event) {\n  const activeConnectionFromSelect = event?.target?.value || \"I\";\n  await setActiveConnection(activeConnectionFromSelect);\n}\n","// js/services/turnouts.js\n\nimport { jmriJsonCalls } from \"../../services/api.js\";\nimport { _panelsFileCache as panelsFileCache, storeUserConfig } from \"../../services/jmri.js\";\n\n/**\n * @typedef {object} NormalisedTurnout\n * @property {string} title\n * @property {string} address\n * @property {string} comment\n * @property {number} [state]\n * @property {\"Closed\"|\"Thrown\"|\"Unknown\"} normalisedState\n * @property {boolean} isThrown\n * @property {boolean} isClosed\n * @property {boolean} isUnknown\n * @property {boolean} inverted\n * @property {string} name\n * @property {string} userName\n * @property {Record<string, any>} data\n */\n\n/**\n * Normalise any of the common JMRI JSON shapes into a simple array,\n * then map each entry to a view-friendly structure.\n *\n * Shapes seen in the wild:\n * - Array of items\n * - { data: [...] }\n * - { turnouts: [...] }\n * - { list: [...] }\n * - { items: [...] }\n * - { <name>: {...}, <name>: {...}, ... }  (dictionary keyed by name)\n *\n * @param {unknown} rawPayload\n * @returns {Array<NormalisedTurnout>}\n */\nexport function normaliseTurnouts(rawPayload) {\n  /** @type {any[] | null} */\n  let items = null;\n\n  if (Array.isArray(rawPayload)) {\n    items = rawPayload;\n  } else if (rawPayload && typeof rawPayload === \"object\") {\n    // @ts-ignore - narrow at runtime\n    if (Array.isArray(rawPayload.data)) {\n      // @ts-ignore\n      items = rawPayload.data;\n      // @ts-ignore\n    } else if (Array.isArray(rawPayload.turnouts)) {\n      // @ts-ignore\n      items = rawPayload.turnouts;\n      // @ts-ignore\n    } else if (Array.isArray(rawPayload.list)) {\n      // @ts-ignore\n      items = rawPayload.list;\n      // @ts-ignore\n    } else if (Array.isArray(rawPayload.items)) {\n      // @ts-ignore\n      items = rawPayload.items;\n    } else {\n      // Dictionary keyed by name → use the values\n      // @ts-ignore\n      items = Object.values(rawPayload);\n    }\n  }\n\n  return (items || []).map(toTurnoutRecord).filter(Boolean);\n}\n\n/**\n * Convert a single raw turnout object into a UI-friendly record while\n * preserving all original fields under `data`.\n *\n * Display rules:\n * - title   = userName\n * - address = name\n * - comment = comment (if present)\n * - state flags derived from `state`, considering `inverted`\n *\n * JMRI numeric state notes (typical):\n *   Thrown = 4, Closed = 2\n *   Some layouts treat 0 as Unknown; `inverted` flips the meaning.\n *\n * @param {any} source - Raw turnout item as returned by JMRI.\n * @returns {NormalisedTurnout | null}\n */\nexport function toTurnoutRecord(source) {\n  if (!source) return null;\n\n  // Preserve everything the server provided (prefer nested `data`, else the whole source)\n  const rawData = (source.data && typeof source.data === \"object\" ? source.data : source) || {};\n\n  // Core fields used for display\n  const name = rawData.name || \"\";\n  const userName = rawData.userName || \"\";\n  const comment = rawData.comment || \"\";\n  const isInverted = Boolean(rawData.inverted);\n\n  // State → \"Closed\" / \"Thrown\" / \"Unknown\"\n  const rawState = rawData.state;\n  let normalisedState = \"Unknown\";\n  let isThrown = false;\n  let isClosed = false;\n  let isUnknown = true;\n\n  // Typical JMRI constants:\n  // Thrown = 4, Closed = 2. The `inverted` flag flips the interpretation.\n  if ((rawState === 4 && !isInverted) || (rawState === 2 && isInverted)) {\n    normalisedState = \"Thrown\";\n    isThrown = true;\n    isUnknown = false;\n  } else if ((rawState === 2 && !isInverted) || (rawState === 4 && isInverted)) {\n    normalisedState = \"Closed\";\n    isClosed = true;\n    isUnknown = false;\n  }\n\n  /** @type {NormalisedTurnout} */\n  const record = {\n    // Display fields\n    title: userName,\n    address: name,\n    comment,\n\n    // State\n    state: rawState,\n    normalisedState,\n    isThrown,\n    isClosed,\n    isUnknown,\n    inverted: isInverted,\n\n    // IDs we may need later\n    name,\n    userName,\n\n    // Original payload\n    data: rawData,\n  };\n\n  return record;\n}\n\n/**\n * Create a new turnout (JMRI: PUT /json/turnout/:systemName).\n *\n * @param {{ systemName:string, userName?:string, comment?:string, inverted?:boolean }} input\n * @returns {Promise<NormalisedTurnout>} Normalised turnout record.\n */\nexport async function createTurnout(input) {\n  const systemName = String(input.systemName || \"\").trim();\n  if (!systemName) throw new Error(\"System Name is required\");\n\n  // Build payload; include only non-nullish fields.\n  const payload = {\n    name: systemName,\n    ...(input.userName != null ? { userName: input.userName } : {}),\n    ...(input.comment != null ? { comment: input.comment } : {}),\n    ...(input.inverted != null ? { inverted: !!input.inverted } : {}),\n  };\n\n  const path = `/json/turnout/${encodeURIComponent(systemName)}`;\n\n  // 1) Create with PUT (some JMRI versions ignore extras here)\n  const created = await jmriJsonCalls(\"PUT\", path, payload);\n\n  // 2) If we sent any extras, apply them with a POST so userName sticks\n  const sentExtras =\n    Object.prototype.hasOwnProperty.call(payload, \"userName\") ||\n    Object.prototype.hasOwnProperty.call(payload, \"comment\") ||\n    Object.prototype.hasOwnProperty.call(payload, \"inverted\");\n\n  const finalRaw = sentExtras ? await jmriJsonCalls(\"POST\", path, payload) : created;\n\n  await storeUserConfig(panelsFileCache);\n\n  return toTurnoutRecord(finalRaw);\n}\n\n/**\n * Update an existing turnout (JMRI: POST /json/turnout/:systemName).\n * Note: This does not rename the system name (JMRI typically treats name as immutable).\n *\n * @param {string} systemName\n * @param {{ userName?:string, comment?:string, inverted?:boolean, state?:number }} fields\n * @returns {Promise<NormalisedTurnout | null>} Updated normalised record.\n */\nexport async function updateTurnout(systemName, fields) {\n  const name = String(systemName || \"\").trim();\n  if (!name) throw new Error(\"System Name is required\");\n\n  const payload = {\n    name,\n    ...(fields.userName != null ? { userName: fields.userName } : {}),\n    ...(fields.comment != null ? { comment: fields.comment } : {}),\n    ...(fields.inverted != null ? { inverted: !!fields.inverted } : {}),\n    ...(fields.state != null ? { state: fields.state } : {}),\n  };\n\n  const raw = await jmriJsonCalls(\"POST\", `/json/turnout/${encodeURIComponent(name)}`, payload);\n  return toTurnoutRecord(raw);\n}\n\n/**\n * Delete a turnout (JMRI: DELETE /json/turnout/:systemName).\n *\n * @param {string} systemName\n * @returns {Promise<void>}\n */\nexport async function deleteTurnout(systemName) {\n  const name = String(systemName || \"\").trim();\n  if (!name) throw new Error(\"System Name is required\");\n  await jmriJsonCalls(\"DELETE\", `/json/turnout/${encodeURIComponent(name)}`);\n}\n\n/**\n * Batch-create N turnouts with sequential DCC addresses.\n * For each created turnout:\n *   - systemName = `${prefix}${base + index}`\n *   - userName   = `${baseUserName} ${base + index}` if baseUserName provided\n *   - comment/inverted copied through\n *   - optional state applied via updateTurnout (same as single-create flow)\n *\n * @param {object} params\n * @param {string} params.prefix\n * @param {number|string} params.baseAddress\n * @param {number|string} params.count\n * @param {string} [params.baseUserName]\n * @param {string} [params.comment]\n * @param {boolean} [params.inverted]\n * @param {number} [params.desiredStateRaw]\n * @returns {Promise<{ created: number[], failed: Array<{address:number, message:string}> }>}\n */\nexport async function batchCreateTurnouts({\n  prefix,\n  baseAddress,\n  count,\n  baseUserName,\n  comment,\n  inverted,\n  desiredStateRaw,\n}) {\n  /** @type {number[]} */\n  const created = [];\n  /** @type {Array<{address:number, message:string}>} */\n  const failed = [];\n\n  const base = Number(baseAddress);\n  const turnoutCount = Math.max(1, Math.trunc(Number(count) || 0));\n\n  for (let index = 0; index < turnoutCount; index++) {\n    const address = base + index;\n    const systemName = `${prefix}${address}`;\n    const userName = baseUserName ? `${baseUserName} ${address}` : undefined;\n\n    try {\n      await createTurnout({ systemName, userName, comment, inverted });\n      if (desiredStateRaw != null) {\n        await updateTurnout(systemName, { state: desiredStateRaw });\n      }\n      created.push(address);\n    } catch (err) {\n      failed.push({ address, message: err?.message || \"create failed\" });\n    }\n  }\n\n  return { created, failed };\n}\n","// js/controllers/turnouts/selectors.js\n// Centralized DOM selectors for the Turnouts panel.\n//\n// Usage:\n//   import { TURNOUTS_SELECTORS, queryTurnoutsElements } from \"./selectors.js\";\n//   const { panelElement, listElement, addButtonElement } = queryTurnoutsElements();\n\n/** Readable selector map for Turnouts-related elements. */\nexport const TURNOUTS_SELECTORS = Object.freeze({\n  panel: \"#panelTurnouts\",\n  list: \"#turnoutsList\",\n  addButton: \"#turnoutsAddBtn\",\n});\n\n/**\n * Query and return the key Turnouts elements.\n *\n * @param {ParentNode} [root=document] - Optional root node to scope the queries.\n * @returns {{\n *   panelElement: HTMLElement|null,\n *   listElement: HTMLElement|null,\n *   addButtonElement: HTMLButtonElement|null\n * }}\n */\nexport function queryTurnoutsElements(root = document) {\n  const find = (selector) => /** @type {HTMLElement|null} */ (root.querySelector(selector));\n\n  return {\n    panelElement: find(TURNOUTS_SELECTORS.panel),\n    listElement: find(TURNOUTS_SELECTORS.list),\n    addButtonElement: /** @type {HTMLButtonElement|null} */ (find(TURNOUTS_SELECTORS.addButton)),\n  };\n}\n","// js/controllers/turnouts/view.js\nimport { escapeHtml } from \"../../ui/dom.js\";\n// View helpers for the Turnouts panel.\n// - Builds a card element for a turnout using the shared roster card styles\n// - Provides a small inline SVG that visually indicates CLOSED vs THROWN\n\n/**\n * Build an inline SVG icon indicating the turnout's route.\n * Shows a green “?” badge if state is unknown.\n *\n * @param {{ isThrown?: boolean, isUnknown?: boolean }} params\n * @returns {string} SVG markup as a string.\n */\nfunction svgTurnoutIcon({ isThrown = false, isUnknown = false }) {\n  const stateClass = isUnknown ? \"unknown\" : isThrown ? \"thrown\" : \"closed\";\n\n  // Badge appears only for unknown state\n  const unknownBadge = isUnknown\n    ? `\n    <g class=\"badge\" aria-hidden=\"true\">\n      <!-- question mark -->\n      <text class=\"badge-text\" text-anchor=\"middle\" font-family=\"system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial\" x=\"32\" font-size=\"48\" y=\"35\">?</text>\n    </g>`\n    : \"\";\n\n  return `\n<svg class=\"turnout-icon ${stateClass}\" viewBox=\"0 0 64 40\" width=\"64\" height=\"40\" aria-hidden=\"true\">\n  <g fill=\"none\" stroke-width=\"4\" stroke-linecap=\"round\">\n    <!-- straight route -->\n    <path class=\"trk base\"    d=\"M4 20 H60\" />\n    <!-- diverging route -->\n    <path class=\"trk diverge\" d=\"M4 20 Q30 4 60 4\" />\n  </g>\n  ${unknownBadge}\n</svg>`;\n}\n\n/**\n * Create a roster-style card for a single turnout.\n *\n * @param {object} record - Normalised turnout data.\n * @param {string} [record.title] - Preferred display title (usually userName).\n * @param {string} [record.address] - The turnout's address/name.\n * @param {string} [record.normalisedState] - \"Closed\" | \"Thrown\" | \"Unknown\".\n * @param {string} [record.comment] - Optional comment/note.\n * @param {boolean} [record.isThrown] - True if THROWN.\n * @param {boolean} [record.isUnknown] - True if state is unknown.\n *\n * @param {{ onEdit?: (record: object) => void, onDelete?: (record: object) => void, onToggle?: (record: object) => void }} [handlers={}]\n * @returns {HTMLElement} A fully populated <article class=\"card\"> element.\n */\nexport function createTurnoutCard(record, handlers = {}) {\n  const cardElement = document.createElement(\"article\");\n  cardElement.className = \"card\";\n\n  const titleText = record.title || \"(unnamed)\";\n  const subtitleParts = [];\n  if (record.address) subtitleParts.push(record.address);\n  if (record.normalisedState || record.normalizedState) {\n    subtitleParts.push(record.normalisedState || record.normalizedState);\n  }\n  const subtitleText = subtitleParts.join(\" · \");\n\n  cardElement.innerHTML = `\n    <div class=\"card-img\" aria-hidden=\"true\" data-act=\"toggle\">\n      ${svgTurnoutIcon(record)}\n    </div>\n    <div class=\"card-body card-body-turnout\">\n      <div class=\"card-title\">${escapeHtml(titleText)}</div>\n      <div class=\"card-sub\">${escapeHtml(subtitleText)}</div>\n      ${record.comment ? `<div class=\"card-sub\">${escapeHtml(record.comment)}</div>` : \"\"}\n    </div>\n  `;\n\n  cardElement.querySelector('[data-act=\"toggle\"]')?.addEventListener(\"click\", (event) => {\n    event.stopPropagation();\n    handlers.onToggle?.(record);\n  });\n\n  cardElement.addEventListener(\"click\", (event) => {\n    event.stopPropagation();\n    handlers.onEdit?.(record);\n  });\n\n  return cardElement;\n}\n","// js/services/prefixes.js\n// Fetch and cache JMRI connection prefixes for a bean type.\n\n/** In-memory cache keyed by bean type (e.g., \"turnout\"). */\nconst prefixCache = new Map();\n\n/**\n * Fetch JMRI connection prefixes for a given bean type and cache the result.\n *\n * @param {\"turnout\"|\"sensor\"|\"light\"} [type=\"turnout\"] - JMRI bean type.\n * @returns {Promise<Array<{type:string, systemPrefix:string, systemNamePrefix:string, connectionName:string}>>}\n */\nexport async function getPrefixes(type = \"turnout\") {\n  const key = String(type);\n  if (prefixCache.has(key)) return prefixCache.get(key);\n\n  const response = await fetch(`/api/jmri/prefix?type=${encodeURIComponent(type)}`, {\n    headers: { Accept: \"application/json\" },\n  });\n  if (!response.ok) throw new Error(`Prefix fetch failed: ${response.status}`);\n\n  const payload = await response.json();\n  prefixCache.set(key, payload);\n  return payload;\n}\n","// js/controllers/turnouts/dialog.js\n// Turnout dialog (create + edit) with shared DCC validation\n//\n// #toSystemName holds the numeric DCC address only.\n// On create: systemName = <selectedPrefix> + <digits>.\n// On edit: we show the numeric part (readonly) and never rename.\n\nimport { onDeleteTurnout } from \"./index.js\";\nimport { busyWhile } from \"../../ui/busy.js\";\nimport { createTurnout, updateTurnout } from \"./data.js\";\nimport { getPrefixes } from \"../../services/prefixes.js\";\nimport { showToast } from \"../../ui/toast.js\";\nimport { resetDialogTabsAndScroll } from \"../../ui/tabs.js\";\nimport { query, getInputValue, isElementChecked } from \"../../ui/dom.js\";\nimport {\n  DCC_RULES_REQUIRED,\n  getDccAddressError,\n  setupLiveDccValidation,\n} from \"../../validation/dcc.js\";\n\n/* ============================================================================\n * Selectors & Constants\n * ========================================================================== */\n\n/** Dialog element selectors. */\nconst TURNOUT_DIALOG_SELECTORS = {\n  dialog: \"#turnoutDialog\",\n  form: \"#turnoutForm\",\n  title: \"#turnoutDialogTitle\",\n  prefix: \"#toPrefixSelect\",\n  system: \"#toSystemName\",\n  user: \"#toUserName\",\n  comment: \"#toComment\",\n  inverted: \"#toInverted\",\n  state: \"#toState\",\n  save: \"#turnoutSave\",\n  cancel: \"#turnoutCancel\",\n  close: \"#turnoutClose\",\n  delete: \"#turnoutDelete\",\n  countRow: \"#toCountRow\",\n  count: \"#toCount\",\n};\n\n/** Busy message shown while saving. */\nconst savingMessage = \"Saving…\";\n\n/* State */\nlet onSavedCallback = null;\n/** @type {\"create\"|\"edit\"|\"sequential\"} */\nlet dialogMode = \"edit\"; // default\n/** @type {string[]} */\nlet knownSystemNamePrefixes = []; // e.g., [\"LT\",\"IT\",\"MT\"]\n/** @type {null | (() => void)} */\nlet detachAddressValidation = null;\n\n// Stored handlers so we can remove before re-adding\n/** @type {null | (() => void)} */ let boundSaveHandler = null;\n/** @type {null | (() => void)} */ let boundCancelHandler = null;\n/** @type {null | (() => void)} */ let boundDeleteHandler = null;\n\n/* ============================================================================\n * Prefix Helpers\n * ========================================================================== */\n\n/**\n * Fetch prefixes and populate the <select>. Also cache the known prefixes.\n *\n * @returns {Promise<Array<{systemPrefix:string, systemNamePrefix:string, connectionName?:string}>>}\n */\nasync function populatePrefixSelect() {\n  const prefixSelect = query(TURNOUT_DIALOG_SELECTORS.prefix);\n  if (!prefixSelect) return [];\n\n  const prefixList = await getPrefixes(\"turnout\"); // [{systemPrefix, systemNamePrefix, connectionName}, ...]\n  knownSystemNamePrefixes = Array.isArray(prefixList)\n    ? prefixList.map((prefixObject) => prefixObject.systemNamePrefix).filter(Boolean)\n    : [];\n\n  prefixSelect.innerHTML = \"\";\n  for (const connection of prefixList) {\n    const option = document.createElement(\"option\");\n    option.value = connection.systemNamePrefix; // e.g., \"D\"\n    option.textContent = connection.connectionName\n      ? `${connection.systemNamePrefix} — ${connection.connectionName}`\n      : connection.systemNamePrefix;\n    prefixSelect.appendChild(option);\n  }\n\n  return prefixList;\n}\n\n/**\n * Which known prefix does the given system name start with (if any)?\n *\n * @param {string} systemName\n * @returns {string|null}\n */\nfunction detectSystemPrefix(systemName) {\n  if (!systemName) return null;\n  for (const prefix of knownSystemNamePrefixes) {\n    if (systemName.startsWith(prefix)) return prefix;\n  }\n  return null;\n}\n\n/**\n * Extract the numeric DCC address from a full system name.\n *\n * @param {string} systemName\n * @param {string|null} detectedPrefix\n * @returns {string}\n */\nfunction extractDigitsFromSystemName(systemName, detectedPrefix) {\n  const source = (systemName || \"\").trim();\n  if (!source) return \"\";\n\n  let remainder = source;\n  if (detectedPrefix && source.startsWith(detectedPrefix)) {\n    remainder = source.slice(detectedPrefix.length);\n  } else {\n    // common pattern like \"LT123\"\n    remainder = source.replace(/^[A-Za-z]+/, \"\");\n  }\n\n  const match = remainder.match(/\\d+/);\n  return match ? match[0] : \"\";\n}\n\n/* ============================================================================\n * Form I/O\n * ========================================================================== */\n\n/**\n * Populate the form inputs from a record.\n *\n * @param {object|null} record\n * @param {string|null} detectedPrefixForEdit\n * @returns {void}\n */\nfunction setFormValuesFromRecord(record, detectedPrefixForEdit = null) {\n  const systemInput = query(TURNOUT_DIALOG_SELECTORS.system);\n  const userInput = query(TURNOUT_DIALOG_SELECTORS.user);\n  const commentInput = query(TURNOUT_DIALOG_SELECTORS.comment);\n  const invertedInput = query(TURNOUT_DIALOG_SELECTORS.inverted);\n  const stateSelect = query(TURNOUT_DIALOG_SELECTORS.state);\n\n  const fullSystemName = record?.name || record?.address || record?.data?.name || \"\";\n\n  systemInput.value = extractDigitsFromSystemName(fullSystemName, detectedPrefixForEdit);\n  userInput.value = record?.userName || record?.title || \"\";\n  commentInput.value = record?.comment || \"\";\n  invertedInput.checked = !!record?.inverted;\n  stateSelect.value = \"\"; // unchanged by default\n}\n\n/**\n * Collect form values from the dialog inputs.\n *\n * @returns {{ dccDigits:string, selectedPrefix:string, userName:string, comment:string, inverted:boolean, stateChoice:string }}\n */\nfunction collectFormValues() {\n  return {\n    dccDigits: getInputValue(TURNOUT_DIALOG_SELECTORS.system),\n    selectedPrefix: getInputValue(TURNOUT_DIALOG_SELECTORS.prefix),\n    userName: getInputValue(TURNOUT_DIALOG_SELECTORS.user),\n    comment: getInputValue(TURNOUT_DIALOG_SELECTORS.comment),\n    inverted: isElementChecked(TURNOUT_DIALOG_SELECTORS.inverted),\n    stateChoice: getInputValue(TURNOUT_DIALOG_SELECTORS.state), // \"\", \"closed\", \"thrown\"\n  };\n}\n\n/**\n * Map desired logical state → JMRI raw value, honouring inversion.\n *\n * @param {string} stateChoice - \"\", \"closed\", or \"thrown\".\n * @param {boolean} inverted\n * @returns {number|null} JMRI raw state or null if no choice.\n */\nfunction convertStateToRaw(stateChoice, inverted) {\n  if (!stateChoice) return null;\n  const wantsThrown = stateChoice === \"thrown\";\n  // Normal: Closed=2, Thrown=4. Inverted flips them.\n  return wantsThrown ? (inverted ? 2 : 4) : inverted ? 4 : 2;\n}\n\n/* ============================================================================\n * Sequential Helpers\n * ========================================================================== */\n\n/**\n * Read and clamp the sequential count (1..64).\n *\n * @returns {number}\n */\nfunction getSequentialCount() {\n  const countValue = Number(query(TURNOUT_DIALOG_SELECTORS.count)?.value ?? 1);\n  return Number.isFinite(countValue) && countValue > 0 ? Math.min(countValue, 64) : 1;\n}\n\n/**\n * Show/hide the sequential row in the form.\n *\n * @param {boolean} visible\n * @returns {void}\n */\nfunction toggleSequentialRow(visible) {\n  const row = query(TURNOUT_DIALOG_SELECTORS.countRow);\n  if (row) row.hidden = !visible;\n}\n\n/* ============================================================================\n * Dialog Chrome\n * ========================================================================== */\n\n/**\n * Set the dialog title text.\n *\n * @param {string} text\n * @returns {void}\n */\nfunction setDialogTitle(text) {\n  const titleElement = query(TURNOUT_DIALOG_SELECTORS.title);\n  if (titleElement) titleElement.textContent = text;\n}\n\n/**\n * Open the dialog and reset tabs/scroll.\n *\n * @returns {void}\n */\nfunction openDialog() {\n  const dialogElement = query(TURNOUT_DIALOG_SELECTORS.dialog);\n  if (dialogElement && !dialogElement.open) dialogElement.showModal();\n  // Reset tab and scroll\n  resetDialogTabsAndScroll(dialogElement);\n}\n\n/**\n * Close the dialog.\n *\n * @returns {void}\n */\nexport function closeDialog() {\n  const dialogElement = query(TURNOUT_DIALOG_SELECTORS.dialog);\n  if (!dialogElement) return;\n  try {\n    if (dialogElement.open) dialogElement.close();\n  } catch (error) {\n    console.warn(error);\n  }\n}\n\n/* ============================================================================\n * Save Flow\n * ========================================================================== */\n\n/**\n * Handle Save click for create/edit/sequential modes.\n *\n * @param {object|null} existingRecord\n * @returns {Promise<void>}\n */\nasync function handleSave(existingRecord) {\n  const form = collectFormValues();\n  const isCreateMode = [\"create\", \"sequential\"].includes(dialogMode);\n\n  // Validate (create only)\n  const validationError = isCreateMode ? validateBeforeCreate(form) : null;\n  if (validationError) {\n    showToast?.(validationError);\n    return;\n  }\n\n  const finalSystemName = computeFinalSystemName(existingRecord, form, isCreateMode);\n  const desiredStateRaw = computeInitialStateRaw(form);\n  const sequentialCount = isCreateMode ? getSequentialCount() : 1;\n\n  try {\n    let toastMessage = \"Saved\";\n\n    await busyWhile(async () => {\n      if (isCreateMode && sequentialCount > 1) {\n        // Batch create sequential addresses\n        toastMessage = await createSequentialTurnouts(form, sequentialCount, desiredStateRaw);\n      } else if (isCreateMode) {\n        // Single create\n        await createSingleTurnout(finalSystemName, form, desiredStateRaw);\n      } else {\n        // Edit existing\n        const targetSystemName = getTargetSystemName(existingRecord, finalSystemName);\n        await updateExistingTurnout(targetSystemName, form, desiredStateRaw);\n      }\n    }, savingMessage);\n\n    closeDialog();\n    showToast?.(toastMessage);\n    onSavedCallback?.();\n  } catch (err) {\n    showToast?.(err?.message || \"Save failed\");\n  }\n}\n\n/* ============================================================================\n * Save helpers\n * ========================================================================== */\n\n/**\n * Validate inputs used on create. Returns error message string or null.\n *\n * @param {{ dccDigits:string, selectedPrefix:string }} form\n * @returns {string|null}\n */\nfunction validateBeforeCreate(form) {\n  const addrErr = getDccAddressError(form.dccDigits, DCC_RULES_REQUIRED);\n  if (addrErr) return addrErr;\n  if (!form.selectedPrefix) return \"Select a connection/prefix\";\n  return null;\n}\n\n/**\n * Build the final system name for create; or use the existing record on edit.\n *\n * @param {any} existingRecord\n * @param {{ dccDigits:string, selectedPrefix:string }} form\n * @param {boolean} isCreateMode\n * @returns {string}\n */\nfunction computeFinalSystemName(existingRecord, form, isCreateMode) {\n  if (isCreateMode) {\n    return `${form.selectedPrefix || \"\"}${form.dccDigits || \"\"}`.trim();\n  }\n  return (\n    existingRecord?.name ||\n    existingRecord?.address ||\n    existingRecord?.data?.name ||\n    \"\"\n  ).trim();\n}\n\n/**\n * Convert UI state choice to raw, honouring inversion.\n *\n * @param {{ stateChoice:string, inverted:boolean }} form\n * @returns {number|null}\n */\nfunction computeInitialStateRaw(form) {\n  return convertStateToRaw(form.stateChoice, form.inverted);\n}\n\n/**\n * When editing, find the correct system name target.\n *\n * @param {any} existingRecord\n * @param {string} fallbackSystemName\n * @returns {string}\n */\nfunction getTargetSystemName(existingRecord, fallbackSystemName) {\n  return (\n    existingRecord?.name ||\n    existingRecord?.address ||\n    existingRecord?.data?.name ||\n    fallbackSystemName\n  );\n}\n\n/**\n * Friendly-name rule for batch:\n * - no base name → just the DCC address\n * - with base name → first = base only, subsequent = \"base DCC\"\n *\n * @param {string} baseUserName\n * @param {number} dccAddress\n * @param {boolean} isFirst\n * @returns {string}\n */\nfunction friendlyNameForBatch(baseUserName, dccAddress, isFirst) {\n  const name = (baseUserName || \"\").trim();\n  if (!name) return String(dccAddress);\n  return isFirst ? name : `${name} ${dccAddress}`;\n}\n\n/**\n * Create a single turnout, applying the “no name → use DCC address” rule.\n *\n * @param {string} systemName\n * @param {{ dccDigits:string, userName:string, comment:string, inverted:boolean }} form\n * @param {number|null} desiredStateRaw\n * @returns {Promise<void>}\n */\nasync function createSingleTurnout(systemName, form, desiredStateRaw) {\n  // If no friendly name provided, use the DCC address as the userName\n  const userName = (form.userName || \"\").trim() || String(form.dccDigits || \"\");\n\n  await createTurnout({\n    systemName,\n    userName,\n    comment: form.comment,\n    inverted: form.inverted,\n  });\n\n  if (desiredStateRaw !== null) {\n    await updateTurnout(systemName, { state: desiredStateRaw });\n  }\n}\n\n/**\n * Update an existing turnout; state is optional.\n *\n * @param {string} systemName\n * @param {{ userName:string, comment:string, inverted:boolean }} form\n * @param {number|null} desiredStateRaw\n * @returns {Promise<void>}\n */\nasync function updateExistingTurnout(systemName, form, desiredStateRaw) {\n  const updateFields = {\n    userName: form.userName,\n    comment: form.comment,\n    inverted: form.inverted,\n  };\n  if (desiredStateRaw !== null) updateFields.state = desiredStateRaw;\n\n  await updateTurnout(systemName, updateFields);\n}\n\n/**\n * Batch-create N turnouts with sequential DCC addresses. Returns a toast string.\n *\n * @param {{ userName:string, comment:string, inverted:boolean, dccDigits:string, selectedPrefix:string }} form\n * @param {number} count\n * @param {number|null} desiredStateRaw\n * @returns {Promise<string>} Summary message for the toast.\n */\nasync function createSequentialTurnouts(form, count, desiredStateRaw) {\n  const baseAddress = Number(form.dccDigits);\n  if (!Number.isFinite(baseAddress)) throw new Error(\"Invalid base DCC address\");\n  const prefix = form.selectedPrefix || \"\";\n  if (!prefix) throw new Error(\"Select a connection/prefix\");\n\n  let createdCount = 0;\n  const failures = [];\n\n  for (let index = 0; index < count; index++) {\n    const dcc = baseAddress + index;\n    const systemName = `${prefix}${dcc}`;\n    const userName = friendlyNameForBatch(form.userName, dcc, index === 0);\n\n    try {\n      await createTurnout({\n        systemName,\n        userName,\n        comment: form.comment,\n        inverted: form.inverted,\n      });\n\n      if (desiredStateRaw !== null) {\n        await updateTurnout(systemName, { state: desiredStateRaw });\n      }\n      createdCount += 1;\n    } catch (err) {\n      failures.push({ dcc, message: err?.message || \"create failed\" });\n    }\n  }\n\n  if (failures.length === 0) {\n    return `Created ${createdCount} turnouts`;\n  }\n  if (createdCount === 0) {\n    return `No turnouts created (${failures.length} failed)`;\n  }\n  const sample = failures\n    .slice(0, 3)\n    .map((failure) => failure.dcc)\n    .join(\", \");\n  return `Created ${createdCount}/${count}; failed: ${\n    failures.length\n  } (${sample}${failures.length > 3 ? \"…\" : \"\"})`;\n}\n\n/* ============================================================================\n * Public API\n * ========================================================================== */\n\n/**\n * Open the Turnout dialog.\n *\n * @param {\"create\"|\"edit\"|\"sequential\"} openMode\n * @param {object|null} record\n * @param {() => void} onSaved\n * @returns {Promise<void>}\n */\nexport async function openTurnoutDialog(openMode, record, onSaved) {\n  dialogMode = openMode;\n  onSavedCallback = onSaved || null;\n\n  setDialogTitle([\"create\", \"sequential\"].includes(openMode) ? \"Add Turnout\" : \"Edit Turnout\");\n\n  toggleSequentialRow(openMode === \"sequential\");\n  const countInput = query(TURNOUT_DIALOG_SELECTORS.count);\n  if (countInput) countInput.value = \"1\";\n\n  // Populate prefixes, then fill the form\n  try {\n    await populatePrefixSelect();\n    const prefixSelect = query(TURNOUT_DIALOG_SELECTORS.prefix);\n\n    if (openMode === \"edit\") {\n      const fullSystemName = record?.name || record?.address || record?.data?.name || \"\";\n      const detectedPrefix = detectSystemPrefix(fullSystemName);\n      if (prefixSelect && detectedPrefix) prefixSelect.value = detectedPrefix;\n\n      query(TURNOUT_DIALOG_SELECTORS.delete).hidden = false;\n\n      setFormValuesFromRecord(record, detectedPrefix);\n    } else {\n      if (prefixSelect && prefixSelect.options.length > 0 && !prefixSelect.value) {\n        prefixSelect.value = prefixSelect.options[0].value;\n      }\n      query(TURNOUT_DIALOG_SELECTORS.delete).hidden = true;\n\n      setFormValuesFromRecord(null, null); // address empty; user types digits\n    }\n  } catch {\n    setFormValuesFromRecord(openMode === \"edit\" ? record : null, null);\n  }\n\n  // In edit mode, DCC field remains readonly (no accidental rename)\n  const addressInput = query(TURNOUT_DIALOG_SELECTORS.system);\n  if (addressInput) {\n    addressInput.toggleAttribute(\"readonly\", openMode === \"edit\");\n  }\n\n  // Live validation (create mode only; disables Save while invalid)\n  if (detachAddressValidation) detachAddressValidation();\n  detachAddressValidation = setupLiveDccValidation({\n    input: addressInput,\n    saveButton: query(TURNOUT_DIALOG_SELECTORS.save),\n    rules: DCC_RULES_REQUIRED,\n    errorId: \"turnoutSystemNameError\",\n    disableSaveWhenInvalid: true,\n  });\n\n  openDialog();\n\n  // Rebind actions idempotently\n  query(TURNOUT_DIALOG_SELECTORS.save)?.removeEventListener(\"click\", boundSaveHandler);\n  query(TURNOUT_DIALOG_SELECTORS.delete)?.removeEventListener(\"click\", boundDeleteHandler);\n  query(TURNOUT_DIALOG_SELECTORS.cancel)?.removeEventListener(\"click\", boundCancelHandler);\n  query(TURNOUT_DIALOG_SELECTORS.close)?.removeEventListener(\"click\", boundCancelHandler);\n\n  boundSaveHandler = () => handleSave(record);\n  boundDeleteHandler = () => onDeleteTurnout(record, true);\n  boundCancelHandler = () => closeDialog();\n\n  query(TURNOUT_DIALOG_SELECTORS.delete)?.addEventListener(\"click\", boundDeleteHandler);\n  query(TURNOUT_DIALOG_SELECTORS.save)?.addEventListener(\"click\", boundSaveHandler);\n  query(TURNOUT_DIALOG_SELECTORS.cancel)?.addEventListener(\"click\", boundCancelHandler);\n  query(TURNOUT_DIALOG_SELECTORS.close)?.addEventListener(\"click\", boundCancelHandler);\n}\n\n/**\n * Optional init hook (reserved for future enhancements).\n *\n * @returns {void}\n */\nexport function initTurnoutDialog() {}\n","// js/controllers/turnouts/index.js\n// Controller for the Turnouts panel.\n// - Initializes on first view\n// - Loads data from JMRI via data.js\n// - Renders turnouts using the shared roster-style card grid\n// - Wires Add / Edit / Delete actions (lightweight prompt flows for now)\n\n/* --------------------------------- Imports -------------------------------- */\n\n// Parent imports\nimport { getTurnouts } from \"../../services/jmri.js\";\nimport { busyWhile } from \"../../ui/busy.js\";\nimport { showToast } from \"../../ui/toast.js\";\nimport { query } from \"../../ui/dom.js\";\n// Sibling imports\nimport { updateTurnout, deleteTurnout, normaliseTurnouts } from \"./data.js\";\nimport { TURNOUTS_SELECTORS as turnoutsSelectors, queryTurnoutsElements } from \"./selectors.js\";\nimport { createTurnoutCard } from \"./view.js\";\nimport { openTurnoutDialog, initTurnoutDialog, closeDialog } from \"./dialog.js\";\n\n/* --------------------------------- State ---------------------------------- */\n\n/** Panel identity used by the shell’s panel switch events. */\nconst panelName = \"turnouts\";\n\n/** User-facing busy messages. */\nconst loadingMessage = \"Loading turnouts…\";\nconst deletingMessage = \"Deleting…\";\n\n/** Module-scoped state for this controller. */\nconst controllerState = {\n  initialized: false,\n  items: [],\n};\n\n/* --------------------------------- Utils ---------------------------------- */\n/**\n * Safe toast helper.\n *\n * @param {string} message - Message to display.\n * @returns {void}\n */\nfunction toast(message) {\n  try {\n    showToast?.(message);\n  } catch (error) {\n    console.warn(error);\n  }\n}\n\n/* =============================== Data layer =============================== */\n/**\n * Fetch the latest turnouts from the data layer and cache them.\n *\n * @returns {Promise<Array>} The normalised turnout list.\n */\nasync function fetchTurnoutsData() {\n  const list = await getTurnouts();\n  const normalisedList = normaliseTurnouts(list);\n  controllerState.items = normalisedList;\n\n  return normalisedList;\n}\n\n/* ================================ Rendering =============================== */\n/**\n * Render a list of turnout records into the panel list container.\n *\n * @param {Array} list - Normalised turnout records.\n * @returns {void}\n */\nfunction renderTurnoutList(list) {\n  const containerElement = query(turnoutsSelectors.list);\n  if (!containerElement) return;\n\n  containerElement.innerHTML = \"\";\n\n  (list || []).forEach((record) => {\n    const cardElement = createTurnoutCard(record, {\n      onToggle: () => onToggleTurnout(record),\n      onEdit: () => onEditTurnout(record),\n      onDelete: () => onDeleteTurnout(record),\n    });\n    containerElement.appendChild(cardElement);\n  });\n\n  // Simple empty state if no items\n  if (!list || list.length === 0) {\n    const empty = document.createElement(\"div\");\n    empty.className = \"empty\";\n    empty.innerHTML = `\n      <div class=\"empty-title\">No turnouts yet</div>\n      <div class=\"empty-subtitle\">Add a turnout to get started.</div>\n    `;\n    containerElement.appendChild(empty);\n  }\n}\n\n/* ============================== Public API =============================== */\n/**\n * Render the Turnouts panel the first time it becomes visible.\n * Subsequent calls are no-ops unless you explicitly reset the controller state.\n *\n * @returns {Promise<void>} Resolves after initial render.\n */\nexport async function renderTurnoutsOnce() {\n  if (controllerState.initialized) return;\n  controllerState.initialized = true;\n\n  // Show an empty grid immediately; fill once data arrives.\n  renderTurnoutList([]);\n\n  try {\n    await busyWhile(async () => {\n      const list = await fetchTurnoutsData();\n      renderTurnoutList(list);\n    }, loadingMessage);\n  } catch {\n    // Intentionally silent: keep the empty state if loading fails.\n  }\n}\n\n/* ================================ Wiring ================================= */\n/**\n * Handle panel switch events; lazily initializes this panel on first show.\n *\n * @param {CustomEvent<{name:string}>} event - panel:changed event with detail.name.\n * @returns {void}\n */\nfunction handlePanelChanged(event) {\n  if (event?.detail?.name === panelName) {\n    renderTurnoutsOnce();\n  }\n}\n\n/**\n * Refresh the list by re-fetching and re-rendering.\n *\n * @returns {Promise<void>} Resolves when refreshed.\n */\nfunction refreshList() {\n  return busyWhile(async () => {\n    const list = await fetchTurnoutsData();\n    renderTurnoutList(list);\n  }, loadingMessage);\n}\n\n/**\n * Open the dialog to add a single turnout.\n *\n * @returns {void}\n */\nfunction onAddTurnout() {\n  openTurnoutDialog(\"create\", null, () => {\n    refreshList();\n  });\n}\n\n/**\n * Open the dialog to add multiple sequential turnouts.\n *\n * @returns {void}\n */\nfunction onAddSequentialTurnout() {\n  openTurnoutDialog(\"sequential\", null, () => {\n    refreshList();\n  });\n}\n\n/**\n * Open the dialog to edit a turnout.\n *\n * @param {object} record - The turnout record to edit.\n * @returns {void}\n */\nfunction onEditTurnout(record) {\n  openTurnoutDialog(\"edit\", record, () => {\n    refreshList();\n  });\n}\n\n/**\n * Delete a turnout (confirm-based flow).\n *\n * @param {object} record - The turnout record to delete.\n * @returns {Promise<void>} Resolves after delete attempt completes.\n */\nexport async function onDeleteTurnout(record) {\n  const systemName = record.name || record.address || record.data?.name;\n  if (!systemName) return;\n\n  const ok = confirm(`Delete turnout \"${record.title || systemName}\"?\\nThis cannot be undone.`);\n  if (!ok) return;\n\n  try {\n    await busyWhile(async () => {\n      await deleteTurnout(systemName);\n      const list = await fetchTurnoutsData();\n      renderTurnoutList(list);\n    }, deletingMessage);\n    toast(\"Turnout deleted\");\n  } catch {\n    toast(\"Delete failed\");\n  } finally {\n    closeDialog();\n  }\n}\n\n/**\n * Initialize the Turnouts controller:\n * - Subscribes to panel changes\n * - Wires up Add button\n * - If the Turnouts panel is already visible (e.g., deep link), render immediately\n *\n * @returns {void}\n */\nexport function initTurnouts() {\n  document.addEventListener(\"panel:changed\", handlePanelChanged);\n  initSplitMenu();\n  initTurnoutDialog();\n\n  const { panelElement } = queryTurnoutsElements();\n  if (panelElement && !panelElement.hasAttribute(\"hidden\")) {\n    renderTurnoutsOnce();\n  }\n}\n\n/**\n * Wire the “Add Turnout” button and split menu.\n *\n * @returns {void}\n */\nfunction initSplitMenu() {\n  const { addButtonElement } = queryTurnoutsElements();\n  const toggle = document.getElementById(\"addTurnoutMore\");\n  const menu = document.getElementById(\"addTurnoutMenu\");\n\n  if (!toggle || !menu || !addButtonElement) return;\n\n  addButtonElement.addEventListener(\"click\", () => {\n    onAddTurnout();\n  });\n\n  const openMenu = () => {\n    menu.hidden = false;\n    toggle.setAttribute(\"aria-expanded\", \"true\");\n    document.addEventListener(\"click\", onDocClick, { capture: true });\n  };\n\n  const closeMenu = () => {\n    menu.hidden = true;\n    toggle.setAttribute(\"aria-expanded\", \"false\");\n    document.removeEventListener(\"click\", onDocClick, { capture: true });\n  };\n\n  const onDocClick = (event) => {\n    if (menu.contains(event.target) || toggle.contains(event.target)) return;\n    closeMenu();\n  };\n\n  toggle.addEventListener(\"click\", (event) => {\n    event.stopPropagation();\n    menu.hidden ? openMenu() : closeMenu();\n  });\n\n  menu.addEventListener(\"click\", (event) => {\n    const btn = event.target.closest(\".menu-item\");\n    if (!btn) return;\n    const action = btn.dataset.action;\n    closeMenu();\n\n    if (action === \"single\") {\n      onAddTurnout();\n    }\n    if (action === \"sequential\") {\n      onAddSequentialTurnout();\n    }\n  });\n}\n\n/* ============================== Toggle action ============================== */\n/**\n * Compute the raw JMRI state value we need to send to achieve the desired\n * logical state, taking `inverted` into account.\n *  - Normal:   Closed=2, Thrown=4\n *  - Inverted: Closed=4, Thrown=2\n *\n * @param {boolean} targetThrown - Desired logical state.\n * @param {boolean} inverted - Whether the turnout is inverted.\n * @returns {number} The raw JMRI state value to send.\n */\nfunction computeRawState(targetThrown, inverted) {\n  if (targetThrown) {\n    return inverted ? 2 : 4;\n  }\n  // target closed\n  return inverted ? 4 : 2;\n}\n\n/**\n * Toggle a single turnout between Closed and Thrown (Unknown → Thrown).\n *\n * @param {object} record - The turnout record.\n * @returns {Promise<void>} Resolves after toggle attempt.\n */\nasync function onToggleTurnout(record) {\n  const systemName = record.name || record.address || record.data?.name;\n  if (!systemName) return;\n\n  // Decide desired logical target: if currently thrown → close, else → throw.\n  // If unknown, default to Thrown.\n  const currentlyThrown = !!record.isThrown;\n  const currentlyClosed = !!record.isClosed;\n  const targetThrown = currentlyClosed ? true : !currentlyThrown;\n\n  const targetRaw = computeRawState(targetThrown, !!record.inverted);\n\n  try {\n    await updateTurnout(systemName, { state: targetRaw });\n    // Refresh list after change\n    const list = await fetchTurnoutsData();\n    renderTurnoutList(list);\n    // Optional toast\n    try {\n      showToast?.(`Turnout ${targetThrown ? \"Thrown\" : \"Closed\"}`);\n    } catch (error) {\n      console.warn(error);\n    }\n  } catch {\n    try {\n      showToast?.(\"Toggle failed\");\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n}\n","import { initPanels } from \"./ui/panels.js\";\nimport { initDrawer } from \"./ui/drawer.js\";\nimport { populateCachedValues } from \"./services/cachedValues.js\";\nimport { initRoster } from \"./controllers/roster/index.js\";\nimport { initSettings } from \"./controllers/settings/index.js\";\nimport { initTurnouts } from \"./controllers/turnouts/index.js\";\nimport { initDom } from \"./ui/dom.js\";\n\n/**\n * Bootstrap the application:\n * - Initialize DOM-bound UI (header, etc.)\n * - Wire the navigation drawer\n * - Prime cached values (panels file & active connection)\n * - Initialize panels + controllers\n */\n(function initializeApplication() {\n  // Fire-and-forget initializers; none need to block the others.\n  initDom();\n  initDrawer();\n  populateCachedValues();\n  initPanels();\n  initRoster();\n  initSettings();\n  initTurnouts();\n})();\n"],"names":["PANEL_IDS","NAV_IDS","byId","id","showPanel","name","wantedPanel","key","panelElement","navButton","initPanels","event","viewName","initialPanelName","initDrawer","drawer","toggles","handleToggleClick","btn","baseOrigin","resolveUrl","pathOrUrl","parseResponse","response","contentType","isJson","text","assertResponseOk","getJSON","path","postJSON","postForm","body","method","postMultipart","formData","jmriJsonCalls","data","cvRegister","cv29Flags","cv17Base","resolveFileNameById","locoId","match","getRoster","rosterEntry","getRailroadName","payload","item","x","_a","opts","url","getDecoder","rosterId","deleteRoster","fileName","form","saveRosterEntry","record","saveRosterDecoder","family","model","manufacturer","mfgId","mfgName","productId","modelId","uploadRosterImage","file","uploadRosterXml","filenameOverride","getFunctions","saveFunctions","items","readAddressFromTrack","values","cv29","msb17","lsb18","longAddress","cv1","writeAddressToTrack","newAddress","mode","addr","curr","isLong","res","identifyDecoderFromLoco","dccAddress","details","error","getTurnouts","lastError","_panelsFileCache","updatePanelsFileCache","value","getCurrentPanelsFile","storeUserConfig","getActiveConnection","setActiveConnection","connectionPrefix","defaultPanelsFilename","scheduledStoreTimeoutId","activeConnection","populateCachedValues","schedulePanelsFileStore","fetchAndPopulateActiveConnection","delay","panelsFileCache","panelsFileName","info","activeConnectionList","populateActiveConnection","connection","busyKey","overlay","dlg","panel","div","message","root","busyOverlay","showBusy","hideBusy","busyWhile","task","TOAST_ID","TOAST_DIALOG_ID","hideToastTimerId","getToastNodes","toastDialog","toastElement","showToast","durationMs","DCC_RULES_REQUIRED","getDccAddressError","raw","rules","required","digitsOnly","maxDigits","min","max","num","ensureInlineErrorAfter","input","errorId","className","element","applyNumericInputAttributes","renderDccValidation","errorEl","saveButton","writeDccButton","disableSaveWhenInvalid","msg","setupLiveDccValidation","onInput","toSafeFileBase","renderRailroadName","selector","headerElement","escapeHtml","initDom","query","setInputValue","getInputValue","isElementChecked","selectorOrElement","setImageSource","src","buildRosterIconUrlForId","trimmedId","initTabs","tabList","wireTabList","tabs","tabEl","updatePanelsForTabs","activateTab","nextTab","allTabs","focus","panelId","panelEl","activeTab","resetDialogTabsAndScroll","dialogElement","defaultPanelId","tabButtons","tabToActivate","button","activateTabButton","scrollContainer","tabButtonElement","allTabButtons","allPanels","buttonEl","targetPanelId","onClickReadDccChip","selectElement","dccChipList","preferred","_b","populateDecoderSelectWithDccChipList","err","preloadDecoderSelection","resetDecoderSelect","decoderResponse","saved","manufacturerName","familyName","modelName","updatePlaceholderCount","savedOption","createDecoderOptionElement","cleanText","makeOptionKey","buildDecoderOptionMetadataFromDccChipList","uniqueOptionMetadataList","seenKeys","candidates","identifiedValues","i","candidate","candidateModelName","candidateKey","variants","variantIndex","variantModelName","variantKey","createOptionsFragmentForDecoderSelect","optionMetadataList","fragment","placeholderOption","meta","index","option","selectOptionByFamilyModel","getChosenDecoderFromSelect","chosen","_c","_d","_e","placeholderText","count","placeholder","isVariant","targetFamily","targetModel","opt","optFamily","optModel","loadInfoTab","prefill","roadName","locoNumber","locoModel","locoOwner","imageSrc","LOCO_DIALOG_SELECTORS","existingImageUrl","resetInfoTab","collectInfoForm","dcc","road","_f","number","_h","_g","_j","_i","owner","_l","_k","_n","_m","imageUrl","_p","_o","pickedImageFile","clearImageMemory","initInfoImagePicker","dropZoneEl","fileInputEl","imageEl","freshInputEl","eventName","subEvent","previewPickedImageFile","objectUrl","getPickedImageFile","getExistingImageSrc","toAbsoluteSameOriginUrl","fetchUrlAsFile","absoluteUrl","blob","mime","ext","safeId","decideImagePersistence","pickedFile","existingSrc","isBlobPreview","fileFromPreview","getInfoTabSnapshot","onClickReadDcc","address","inputEl","onClickWriteDcc","functionSelectors","maxFunctionNumber","currentRosterFileName","hasBoundDomEvents","functionRowModels","select","rootElement","clampNumber","minValue","maxValue","sortFunctionRowsByNumber","left","right","findNextFreeFunctionNumber","usedNumbersSet","row","functionNumber","findUniqueFunctionNumber","desiredFunctionNumber","probeNumber","wrapNumber","renderSingleFunctionRow","functionRowModel","renderFunctionsList","functionsListElement","populateCopySourceSelect","copySelectElement","rosterEntries","rawRoster","candidateEntries","entry","displayId","candidatesWithFunctions","fetchCandidatesWithFunctions","countLabel","entries","maxConcurrent","results","currentIndex","worker","indexForThisWorker","functionsForEntry","workerCount","copyFunctionsFromSelectedSource","sourceFileName","sourceFunctions","addNewFunctionRow","nextFreeFunctionNumber","deleteFunctionRowByCard","cardElement","cardFunctionNumber","updateRowNumberWithUniqueness","numberInputElement","originalFunctionNumber","rowIndex","rowModel","requestedNumber","clampedRequested","previousNumber","uniqueNumber","updateRowLabel","textInputElement","updateRowLockable","checkboxElement","onFunctionsListClick","onFunctionsListChange","onCopySelectChange","bindFunctionsDomEventsOnce","addFunctionButton","loadFunctionsTab","serverFunctions","serverFunction","saveFunctionsTab","rosterFileName","detachAddressValidation","setDialogTitle","titleEl","applyIdReadOnlyByMode","idInput","resetButton","clone","showDialog","closeDialog","openLocoDialog","onSaved","saveBtn","cancelBtn","closeBtn","deleteBtn","readBtn","writeBtn","readDccChipBtn","handleSave","closeHandler","handleDelete","addressInput","xmlPickerInputElement","fetchRoster","toRosterRecord","toSafeString","formValues","dccAddressError","resolvedFileName","fileToUpload","imageField","proposedFileName","savePayload","decoderSelect","chosenDecoder","fileNameToDelete","ensureXmlPicker","xmlFile","base","safeName","refreshRoster","startXmlUploadFlow","createRosterCard","rosterRecord","handlers","titleText","subtitleLines","filterTruthy","formatRoadAndNumber","buildImageMarkup","line","openEditor","cleaned","escapeAttribute","roadText","numberText","array","ROSTER_SELECTORS","queryRosterElements","buildUniqueIdSuggestion","existingIdSet","exists","matchedId","stem","numberPostfix","collectExistingIdSet","records","recordSet","buildIconUrl","openCopyFromRecord","source","allRecords","existingIds","copyState","ensureCopyPopoverElements","entryItem","copyPopup","search","listContainer","closeButton","closePopover","renderCopyListItems","filterRosterRecordsBySearchTerm","searchValue","term","listItem","handleRecordChosen","positionCopyPopover","anchor","top","openCopySelector","anchorEl","uiElements","panelName","loadingMessage","controllerState","getListContainer","listElement","renderRosterList","rosterList","container","card","loadAndRenderRoster","list","renderRosterOnce","handlePanelChanged","initSplitMenu","addButton","toggle","menu","openMenu","onDocClick","closeMenu","action","initRoster","SETTINGS_SELECTORS","initSettings","connectionsSelectElement","settingsSelectors","updateActiveConnection","populateActiveConnectionSelect","activeConnectionObject","connectionSelect","activeConnectionFromSelect","normaliseTurnouts","rawPayload","toTurnoutRecord","rawData","userName","comment","isInverted","rawState","normalisedState","isThrown","isClosed","isUnknown","createTurnout","systemName","created","finalRaw","updateTurnout","fields","deleteTurnout","TURNOUTS_SELECTORS","queryTurnoutsElements","find","svgTurnoutIcon","createTurnoutCard","subtitleParts","subtitleText","prefixCache","getPrefixes","type","TURNOUT_DIALOG_SELECTORS","savingMessage","onSavedCallback","dialogMode","knownSystemNamePrefixes","boundSaveHandler","boundCancelHandler","boundDeleteHandler","populatePrefixSelect","prefixSelect","prefixList","prefixObject","detectSystemPrefix","prefix","extractDigitsFromSystemName","detectedPrefix","remainder","setFormValuesFromRecord","detectedPrefixForEdit","systemInput","userInput","commentInput","invertedInput","stateSelect","fullSystemName","collectFormValues","convertStateToRaw","stateChoice","inverted","getSequentialCount","countValue","toggleSequentialRow","visible","titleElement","openDialog","existingRecord","isCreateMode","validationError","validateBeforeCreate","finalSystemName","computeFinalSystemName","desiredStateRaw","computeInitialStateRaw","sequentialCount","toastMessage","createSequentialTurnouts","createSingleTurnout","targetSystemName","getTargetSystemName","updateExistingTurnout","addrErr","fallbackSystemName","friendlyNameForBatch","baseUserName","isFirst","updateFields","baseAddress","createdCount","failures","sample","failure","openTurnoutDialog","openMode","countInput","onDeleteTurnout","deletingMessage","toast","fetchTurnoutsData","normalisedList","renderTurnoutList","containerElement","turnoutsSelectors","onToggleTurnout","onEditTurnout","empty","renderTurnoutsOnce","refreshList","onAddTurnout","onAddSequentialTurnout","initTurnouts","addButtonElement","computeRawState","targetThrown","currentlyThrown","targetRaw"],"mappings":"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"}